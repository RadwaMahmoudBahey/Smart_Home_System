
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000021c8  0000225c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00002264  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d7  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000099f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 ec       	ldi	r30, 0xC8	; 200
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <main>
      8a:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include <avr/io.h>
#include <stdio.h>
void (*ADC_pvIntfunc)(void)=NULL;

void ADC_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	    SET_BIT(ADCSRA , ADEN);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	    //SET_BIT(ADCSRA,ADIE);
		// Prescaler Configuration as 128
		SET_BIT(ADCSRA , ADPS2);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	84 60       	ori	r24, 0x04	; 4
     b68:	8c 93       	st	X, r24
		SET_BIT(ADCSRA , ADPS1);
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
		SET_BIT(ADCSRA , ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24

		SET_BIT(ADCSRA , ADSC);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
		// Referance Voltage as AVCC with external capacitor
		CLR_BIT (ADMUX  , REFS1);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	8c 93       	st	X, r24
		SET_BIT (ADMUX  , REFS0);
     ba2:	a7 e2       	ldi	r26, 0x27	; 39
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e2       	ldi	r30, 0x27	; 39
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24

		/*ADC Data Rgith Adjustment 10 bits
		CLR_BIT(ADMUX , ADMUX_ADLAR);*/

		/*Activate Left adjustment result 8 bits */
		SET_BIT(ADMUX ,  ADLAR);
     bb0:	a7 e2       	ldi	r26, 0x27	; 39
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e7 e2       	ldi	r30, 0x27	; 39
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	8c 93       	st	X, r24
		sei();
     bbe:	78 94       	sei


}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <ADC_Read>:

u16 ADC_Read(void)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62

		//step 1 : Clear MUX bits in ADMUX
	ADMUX   = 0b11100000;
     bce:	e7 e2       	ldi	r30, 0x27	; 39
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 ee       	ldi	r24, 0xE0	; 224
     bd4:	80 83       	st	Z, r24


		//Step 2 : Set the required  ADC Channel Selection into the MUX bits

		// Step 3 : Start Single Converstion
		SET_BIT(ADCSRA , ADSC);
     bd6:	a6 e2       	ldi	r26, 0x26	; 38
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8c 93       	st	X, r24


		// Step 4 :  Polling (busy wait ) until the conversion complete flag is set
		while((GET_BIT(ADCSRA , ADIF)) == 0);
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	82 95       	swap	r24
     bec:	8f 70       	andi	r24, 0x0F	; 15
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a9 f3       	breq	.-22     	; 0xbe4 <ADC_Read+0x1e>


		// Step 5 :  Clear Conversion Complete Flag
		SET_BIT(ADCSRA,ADIF);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 61       	ori	r24, 0x10	; 16
     c06:	8c 93       	st	X, r24

		// Step 7 :   return value in ADCH (Left adjustment result 8 bits)

		return ADCH;
     c08:	e5 e2       	ldi	r30, 0x25	; 37
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0

}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <ADC_u8IntSetCallBack>:
u8 ADC_u8IntSetCallBack (void (*PvIntFunc_Copy) (void)){
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <ADC_u8IntSetCallBack+0x6>
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	9b 83       	std	Y+3, r25	; 0x03
     c26:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatusLocal = OK;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	89 83       	std	Y+1, r24	; 0x01
	if( PvIntFunc_Copy != NULL ){
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	9b 81       	ldd	r25, Y+3	; 0x03
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	39 f0       	breq	.+14     	; 0xc42 <ADC_u8IntSetCallBack+0x2a>
		//global ptr = local variable
		ADC_pvIntfunc = PvIntFunc_Copy;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	90 93 69 00 	sts	0x0069, r25
     c3c:	80 93 68 00 	sts	0x0068, r24
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <ADC_u8IntSetCallBack+0x2c>
	}
	else{
		u8ErrorStatusLocal = NULL;
     c42:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorStatusLocal ;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <__vector_16>:



void __vector_16 (void) __attribute__ ((signal));
void __vector_16 (void){
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pvIntfunc != NULL){
     c7c:	80 91 68 00 	lds	r24, 0x0068
     c80:	90 91 69 00 	lds	r25, 0x0069
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	29 f0       	breq	.+10     	; 0xc92 <__vector_16+0x40>
		//global ptr
		ADC_pvIntfunc();
     c88:	e0 91 68 00 	lds	r30, 0x0068
     c8c:	f0 91 69 00 	lds	r31, 0x0069
     c90:	09 95       	icall
	}
	else{
		/* DO NOTHING */
	}

}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <Buzzer_Init>:


#include "Buzzer.h"


void Buzzer_Init() {
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	// Set BUZZER_PIN as output
	DIO_SetPinDirection(BUZZER_PORT , BUZZER_PIN , DIO_OUTPUT);
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <Buzzer_On>:

void Buzzer_On() {
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
	// Set BUZZER_PIN high to turn on the buzzer
	DIO_SetPinValue(BUZZER_PORT , BUZZER_PIN , DIO_HIGH);
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	63 e0       	ldi	r22, 0x03	; 3
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <Buzzer_Off>:

void Buzzer_Off() {
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	// Set BUZZER_PIN low to turn off the buzzer
	DIO_SetPinValue(BUZZER_PORT , BUZZER_PIN , DIO_LOW);
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	63 e0       	ldi	r22, 0x03	; 3
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>

}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <DOOR_CwMotion>:
//3-AVR
#include "avr/io.h"
#include "util/delay.h"
#include "DC_DOOR.h"
// clockwise
void DOOR_CwMotion(void){
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	//setting IN1 to 1 and IN2 to 0
	DIO_SetPinValue(DOOR_PORT, DOOR_IN2,DIO_LOW);
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(DOOR_PORT, DOOR_IN1,DIO_HIGH);
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <DOOR_CCwMotion>:

//anticlockwise
void DOOR_CCwMotion(void){
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
	//setting IN1 to 0 and IN2 to 1
	DIO_SetPinValue(DOOR_PORT, DOOR_IN1,DIO_LOW);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(DOOR_PORT, DOOR_IN2,DIO_HIGH);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <DOOR_Init>:

// DOOR init
void DOOR_Init(void){
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	//directions as output
	DIO_SetPinDirection(DIO_PORTD, DOOR_ENA,DIO_OUTPUT);
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	67 e0       	ldi	r22, 0x07	; 7
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinDirection(DOOR_PORT, DOOR_IN1,DIO_OUTPUT);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinDirection(DOOR_PORT, DOOR_IN2,DIO_OUTPUT);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>

	//setting IN1 to 0 and IN2 to 0
	DIO_SetPinValue(DOOR_PORT, DOOR_IN1,DIO_LOW);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(DOOR_PORT, DOOR_IN2,DIO_LOW);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	62 e0       	ldi	r22, 0x02	; 2
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>

}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <DOOR_Stop>:
//DOOR stop
void DOOR_Stop(void){
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62

	//setting IN1 to 0 and IN2 to 0
	DIO_SetPinValue(DOOR_PORT, DOOR_IN1,DIO_LOW);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(DOOR_PORT, DOOR_IN2,DIO_LOW);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	62 e0       	ldi	r22, 0x02	; 2
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>

}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <MOTOR_Init>:
#include "BIT_MATH.h"
#include "DIO.h"
#include "DC_MOTOR.h"

void MOTOR_Init(void)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_ENA, DIO_OUTPUT);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	63 e0       	ldi	r22, 0x03	; 3
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_IN1, DIO_OUTPUT);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_IN2, DIO_OUTPUT);
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_ENA, DIO_HIGH);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	63 e0       	ldi	r22, 0x03	; 3
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_LOW);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_LOW);
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <MOTOR_CWMotion>:

void MOTOR_CWMotion(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_LOW);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	62 e0       	ldi	r22, 0x02	; 2
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_HIGH);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <MOTOR_CCWMotion>:

void MOTOR_CCWMotion(void)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_LOW);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_HIGH);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <MOTOR_StopMotion>:

void MOTOR_StopMotion(void)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_LOW);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_LOW);
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <DIO_SetPinValue>:
#include "DIO.h"
//4 
#include "avr/io.h"

//function for setting and CLRing pin value
void DIO_SetPinValue(u8 u8PortIdCopy ,u8 u8PinIdCopy , u8 u8PinValCopy){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	27 97       	sbiw	r28, 0x07	; 7
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	6a 83       	std	Y+2, r22	; 0x02
     e6e:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= DIO_PORTD)&& (u8PinIdCopy<=DIO_PIN7)){
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	85 30       	cpi	r24, 0x05	; 5
     e74:	08 f0       	brcs	.+2      	; 0xe78 <DIO_SetPinValue+0x22>
     e76:	ee c0       	rjmp	.+476    	; 0x1054 <DIO_SetPinValue+0x1fe>
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <DIO_SetPinValue+0x2a>
     e7e:	ea c0       	rjmp	.+468    	; 0x1054 <DIO_SetPinValue+0x1fe>
		if(u8PinValCopy == DIO_HIGH){
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <DIO_SetPinValue+0x32>
     e86:	6f c0       	rjmp	.+222    	; 0xf66 <DIO_SetPinValue+0x110>
			switch(u8PortIdCopy){
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3f 83       	std	Y+7, r19	; 0x07
     e90:	2e 83       	std	Y+6, r18	; 0x06
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	9f 81       	ldd	r25, Y+7	; 0x07
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	91 05       	cpc	r25, r1
     e9a:	49 f1       	breq	.+82     	; 0xeee <DIO_SetPinValue+0x98>
     e9c:	2e 81       	ldd	r18, Y+6	; 0x06
     e9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <DIO_SetPinValue+0x5a>
     ea6:	8e 81       	ldd	r24, Y+6	; 0x06
     ea8:	9f 81       	ldd	r25, Y+7	; 0x07
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	61 f0       	breq	.+24     	; 0xec6 <DIO_SetPinValue+0x70>
     eae:	d2 c0       	rjmp	.+420    	; 0x1054 <DIO_SetPinValue+0x1fe>
     eb0:	2e 81       	ldd	r18, Y+6	; 0x06
     eb2:	3f 81       	ldd	r19, Y+7	; 0x07
     eb4:	23 30       	cpi	r18, 0x03	; 3
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f1       	breq	.+92     	; 0xf16 <DIO_SetPinValue+0xc0>
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	9f 81       	ldd	r25, Y+7	; 0x07
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	91 05       	cpc	r25, r1
     ec2:	e9 f1       	breq	.+122    	; 0xf3e <DIO_SetPinValue+0xe8>
     ec4:	c7 c0       	rjmp	.+398    	; 0x1054 <DIO_SetPinValue+0x1fe>
			case DIO_PORTA:
				SET_BIT(PORTA,u8PinIdCopy);
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_SetPinValue+0x8e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_SetPinValue+0x8a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	b3 c0       	rjmp	.+358    	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB,u8PinIdCopy);
     eee:	a8 e3       	ldi	r26, 0x38	; 56
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e8 e3       	ldi	r30, 0x38	; 56
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_SetPinValue+0xb6>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_SetPinValue+0xb2>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	9f c0       	rjmp	.+318    	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC,u8PinIdCopy);
     f16:	a5 e3       	ldi	r26, 0x35	; 53
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e5 e3       	ldi	r30, 0x35	; 53
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_SetPinValue+0xde>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_SetPinValue+0xda>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	8b c0       	rjmp	.+278    	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD,u8PinIdCopy);
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_SetPinValue+0x106>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_SetPinValue+0x102>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	77 c0       	rjmp	.+238    	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			}

		}
		else if(u8PinValCopy == DIO_LOW){
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 23       	and	r24, r24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <DIO_SetPinValue+0x118>
     f6c:	73 c0       	rjmp	.+230    	; 0x1054 <DIO_SetPinValue+0x1fe>
			switch(u8PortIdCopy){
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3d 83       	std	Y+5, r19	; 0x05
     f76:	2c 83       	std	Y+4, r18	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	59 f1       	breq	.+86     	; 0xfd8 <DIO_SetPinValue+0x182>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	2c f4       	brge	.+10     	; 0xf96 <DIO_SetPinValue+0x140>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	69 f0       	breq	.+26     	; 0xfae <DIO_SetPinValue+0x158>
     f94:	5f c0       	rjmp	.+190    	; 0x1054 <DIO_SetPinValue+0x1fe>
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	3d 81       	ldd	r19, Y+5	; 0x05
     f9a:	23 30       	cpi	r18, 0x03	; 3
     f9c:	31 05       	cpc	r19, r1
     f9e:	89 f1       	breq	.+98     	; 0x1002 <DIO_SetPinValue+0x1ac>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_SetPinValue+0x156>
     faa:	40 c0       	rjmp	.+128    	; 0x102c <DIO_SetPinValue+0x1d6>
     fac:	53 c0       	rjmp	.+166    	; 0x1054 <DIO_SetPinValue+0x1fe>
			case DIO_PORTA:
				CLR_BIT(PORTA,u8PinIdCopy);
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_SetPinValue+0x176>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_SetPinValue+0x172>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	3e c0       	rjmp	.+124    	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			case DIO_PORTB:
				CLR_BIT(PORTB,u8PinIdCopy);
     fd8:	a8 e3       	ldi	r26, 0x38	; 56
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e3       	ldi	r30, 0x38	; 56
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_SetPinValue+0x1a0>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_SetPinValue+0x19c>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	29 c0       	rjmp	.+82     	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			case DIO_PORTC:
				CLR_BIT(PORTC,u8PinIdCopy);
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_SetPinValue+0x1ca>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_SetPinValue+0x1c6>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <DIO_SetPinValue+0x1fe>
				break;
			case DIO_PORTD:
				CLR_BIT(PORTD,u8PinIdCopy);
    102c:	a2 e3       	ldi	r26, 0x32	; 50
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e2 e3       	ldi	r30, 0x32	; 50
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_SetPinValue+0x1f4>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_SetPinValue+0x1f0>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    1054:	27 96       	adiw	r28, 0x07	; 7
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <DIO_SetPinDirection>:
void DIO_SetPinDirection(u8 u8PortIdCopy ,u8 u8PinIdCopy , u8 u8PinDirCopy){
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	27 97       	sbiw	r28, 0x07	; 7
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	6a 83       	std	Y+2, r22	; 0x02
    107e:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= DIO_PORTD)&& (u8PinIdCopy<=DIO_PIN7)){
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	85 30       	cpi	r24, 0x05	; 5
    1084:	08 f0       	brcs	.+2      	; 0x1088 <DIO_SetPinDirection+0x22>
    1086:	ee c0       	rjmp	.+476    	; 0x1264 <DIO_SetPinDirection+0x1fe>
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	08 f0       	brcs	.+2      	; 0x1090 <DIO_SetPinDirection+0x2a>
    108e:	ea c0       	rjmp	.+468    	; 0x1264 <DIO_SetPinDirection+0x1fe>
		if(u8PinDirCopy == DIO_OUTPUT){
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	09 f0       	breq	.+2      	; 0x1098 <DIO_SetPinDirection+0x32>
    1096:	6f c0       	rjmp	.+222    	; 0x1176 <DIO_SetPinDirection+0x110>
			switch(u8PortIdCopy){
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3f 83       	std	Y+7, r19	; 0x07
    10a0:	2e 83       	std	Y+6, r18	; 0x06
    10a2:	8e 81       	ldd	r24, Y+6	; 0x06
    10a4:	9f 81       	ldd	r25, Y+7	; 0x07
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	49 f1       	breq	.+82     	; 0x10fe <DIO_SetPinDirection+0x98>
    10ac:	2e 81       	ldd	r18, Y+6	; 0x06
    10ae:	3f 81       	ldd	r19, Y+7	; 0x07
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <DIO_SetPinDirection+0x5a>
    10b6:	8e 81       	ldd	r24, Y+6	; 0x06
    10b8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	61 f0       	breq	.+24     	; 0x10d6 <DIO_SetPinDirection+0x70>
    10be:	d2 c0       	rjmp	.+420    	; 0x1264 <DIO_SetPinDirection+0x1fe>
    10c0:	2e 81       	ldd	r18, Y+6	; 0x06
    10c2:	3f 81       	ldd	r19, Y+7	; 0x07
    10c4:	23 30       	cpi	r18, 0x03	; 3
    10c6:	31 05       	cpc	r19, r1
    10c8:	71 f1       	breq	.+92     	; 0x1126 <DIO_SetPinDirection+0xc0>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	91 05       	cpc	r25, r1
    10d2:	e9 f1       	breq	.+122    	; 0x114e <DIO_SetPinDirection+0xe8>
    10d4:	c7 c0       	rjmp	.+398    	; 0x1264 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTA:
				SET_BIT(DDRA,u8PinIdCopy);
    10d6:	aa e3       	ldi	r26, 0x3A	; 58
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ea e3       	ldi	r30, 0x3A	; 58
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_SetPinDirection+0x8e>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_SetPinDirection+0x8a>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	b3 c0       	rjmp	.+358    	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB,u8PinIdCopy);
    10fe:	a7 e3       	ldi	r26, 0x37	; 55
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e3       	ldi	r30, 0x37	; 55
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_SetPinDirection+0xb6>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_SetPinDirection+0xb2>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	9f c0       	rjmp	.+318    	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC,u8PinIdCopy);
    1126:	a4 e3       	ldi	r26, 0x34	; 52
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_SetPinDirection+0xde>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_SetPinDirection+0xda>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	8b c0       	rjmp	.+278    	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD,u8PinIdCopy);
    114e:	a1 e3       	ldi	r26, 0x31	; 49
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e1 e3       	ldi	r30, 0x31	; 49
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_SetPinDirection+0x106>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_SetPinDirection+0x102>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	77 c0       	rjmp	.+238    	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			}

		}
		else if(u8PinDirCopy == DIO_INPUT){
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	88 23       	and	r24, r24
    117a:	09 f0       	breq	.+2      	; 0x117e <DIO_SetPinDirection+0x118>
    117c:	73 c0       	rjmp	.+230    	; 0x1264 <DIO_SetPinDirection+0x1fe>
			switch(u8PortIdCopy){
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3d 83       	std	Y+5, r19	; 0x05
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	59 f1       	breq	.+86     	; 0x11e8 <DIO_SetPinDirection+0x182>
    1192:	2c 81       	ldd	r18, Y+4	; 0x04
    1194:	3d 81       	ldd	r19, Y+5	; 0x05
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <DIO_SetPinDirection+0x140>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f0       	breq	.+26     	; 0x11be <DIO_SetPinDirection+0x158>
    11a4:	5f c0       	rjmp	.+190    	; 0x1264 <DIO_SetPinDirection+0x1fe>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	23 30       	cpi	r18, 0x03	; 3
    11ac:	31 05       	cpc	r19, r1
    11ae:	89 f1       	breq	.+98     	; 0x1212 <DIO_SetPinDirection+0x1ac>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	91 05       	cpc	r25, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <DIO_SetPinDirection+0x156>
    11ba:	40 c0       	rjmp	.+128    	; 0x123c <DIO_SetPinDirection+0x1d6>
    11bc:	53 c0       	rjmp	.+166    	; 0x1264 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTA:
				CLR_BIT(DDRA,u8PinIdCopy);
    11be:	aa e3       	ldi	r26, 0x3A	; 58
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_SetPinDirection+0x176>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_SetPinDirection+0x172>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	3e c0       	rjmp	.+124    	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB,u8PinIdCopy);
    11e8:	a7 e3       	ldi	r26, 0x37	; 55
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e7 e3       	ldi	r30, 0x37	; 55
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_SetPinDirection+0x1a0>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_SetPinDirection+0x19c>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	29 c0       	rjmp	.+82     	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC,u8PinIdCopy);
    1212:	a4 e3       	ldi	r26, 0x34	; 52
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e4 e3       	ldi	r30, 0x34	; 52
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_SetPinDirection+0x1ca>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_SetPinDirection+0x1c6>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <DIO_SetPinDirection+0x1fe>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD,u8PinIdCopy);
    123c:	a1 e3       	ldi	r26, 0x31	; 49
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e3       	ldi	r30, 0x31	; 49
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_SetPinDirection+0x1f4>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_SetPinDirection+0x1f0>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    1264:	27 96       	adiw	r28, 0x07	; 7
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_GetPinValue>:
u8 DIO_GetPinValue (u8 u8PortIdCopy ,u8 u8PinIdCopy){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_GetPinValue+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_GetPinValue+0x8>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_GetPinValue+0xa>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8Result;
	if((u8PortIdCopy <= DIO_PORTD)&& (u8PinIdCopy<=DIO_PIN7)){
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	08 f0       	brcs	.+2      	; 0x1290 <DIO_GetPinValue+0x1a>
    128e:	6f c0       	rjmp	.+222    	; 0x136e <DIO_GetPinValue+0xf8>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	08 f0       	brcs	.+2      	; 0x1298 <DIO_GetPinValue+0x22>
    1296:	6b c0       	rjmp	.+214    	; 0x136e <DIO_GetPinValue+0xf8>
		switch(u8PortIdCopy){
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3d 83       	std	Y+5, r19	; 0x05
    12a0:	2c 83       	std	Y+4, r18	; 0x04
    12a2:	4c 81       	ldd	r20, Y+4	; 0x04
    12a4:	5d 81       	ldd	r21, Y+5	; 0x05
    12a6:	41 30       	cpi	r20, 0x01	; 1
    12a8:	51 05       	cpc	r21, r1
    12aa:	41 f1       	breq	.+80     	; 0x12fc <DIO_GetPinValue+0x86>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <DIO_GetPinValue+0x4c>
    12b6:	2c 81       	ldd	r18, Y+4	; 0x04
    12b8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ba:	21 15       	cp	r18, r1
    12bc:	31 05       	cpc	r19, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <DIO_GetPinValue+0x62>
    12c0:	52 c0       	rjmp	.+164    	; 0x1366 <DIO_GetPinValue+0xf0>
    12c2:	4c 81       	ldd	r20, Y+4	; 0x04
    12c4:	5d 81       	ldd	r21, Y+5	; 0x05
    12c6:	43 30       	cpi	r20, 0x03	; 3
    12c8:	51 05       	cpc	r21, r1
    12ca:	51 f1       	breq	.+84     	; 0x1320 <DIO_GetPinValue+0xaa>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	b9 f1       	breq	.+110    	; 0x1344 <DIO_GetPinValue+0xce>
    12d6:	47 c0       	rjmp	.+142    	; 0x1366 <DIO_GetPinValue+0xf0>
		case DIO_PORTA:
			u8Result = GET_BIT(PINA,u8PinIdCopy);
    12d8:	e9 e3       	ldi	r30, 0x39	; 57
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_GetPinValue+0x7a>
    12ec:	55 95       	asr	r21
    12ee:	47 95       	ror	r20
    12f0:	8a 95       	dec	r24
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_GetPinValue+0x76>
    12f4:	ca 01       	movw	r24, r20
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	35 c0       	rjmp	.+106    	; 0x1366 <DIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			u8Result = GET_BIT(PINB,u8PinIdCopy);
    12fc:	e6 e3       	ldi	r30, 0x36	; 54
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_GetPinValue+0x9e>
    1310:	55 95       	asr	r21
    1312:	47 95       	ror	r20
    1314:	8a 95       	dec	r24
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_GetPinValue+0x9a>
    1318:	ca 01       	movw	r24, r20
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	23 c0       	rjmp	.+70     	; 0x1366 <DIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			u8Result = GET_BIT(PINC,u8PinIdCopy);
    1320:	e3 e3       	ldi	r30, 0x33	; 51
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a9 01       	movw	r20, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_GetPinValue+0xc2>
    1334:	55 95       	asr	r21
    1336:	47 95       	ror	r20
    1338:	8a 95       	dec	r24
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_GetPinValue+0xbe>
    133c:	ca 01       	movw	r24, r20
    133e:	81 70       	andi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <DIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			u8Result =GET_BIT(PIND,u8PinIdCopy);
    1344:	e0 e3       	ldi	r30, 0x30	; 48
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_GetPinValue+0xe6>
    1358:	55 95       	asr	r21
    135a:	47 95       	ror	r20
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_GetPinValue+0xe2>
    1360:	ca 01       	movw	r24, r20
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return u8Result;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	8e 83       	std	Y+6, r24	; 0x06
	}
	else{

	}
}
    136a:	8e 81       	ldd	r24, Y+6	; 0x06
    136c:	00 c0       	rjmp	.+0      	; 0x136e <DIO_GetPinValue+0xf8>
    136e:	26 96       	adiw	r28, 0x06	; 6
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <DIO_SetPortValue>:

//functions for ports
void DIO_SetPortValue(u8 u8PortIdCopy , u8 u8PortValCopy){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <DIO_SetPortValue+0x6>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <DIO_SetPortValue+0x8>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	6a 83       	std	Y+2, r22	; 0x02
	if((u8PortIdCopy <= DIO_PORTD)){
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	85 30       	cpi	r24, 0x05	; 5
    1394:	90 f5       	brcc	.+100    	; 0x13fa <DIO_SetPortValue+0x7a>
		switch(u8PortIdCopy){
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3c 83       	std	Y+4, r19	; 0x04
    139e:	2b 83       	std	Y+3, r18	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	d1 f0       	breq	.+52     	; 0x13de <DIO_SetPortValue+0x5e>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <DIO_SetPortValue+0x3e>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <DIO_SetPortValue+0x54>
    13bc:	1e c0       	rjmp	.+60     	; 0x13fa <DIO_SetPortValue+0x7a>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	23 30       	cpi	r18, 0x03	; 3
    13c4:	31 05       	cpc	r19, r1
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <DIO_SetPortValue+0x68>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	91 05       	cpc	r25, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <DIO_SetPortValue+0x72>
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <DIO_SetPortValue+0x7a>
		case DIO_PORTA:
			PORTA = u8PortValCopy;
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <DIO_SetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB = u8PortValCopy;
    13de:	e8 e3       	ldi	r30, 0x38	; 56
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <DIO_SetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC = u8PortValCopy;
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <DIO_SetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD = u8PortValCopy;
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
			break;
		}

	}

}
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <DIO_SetPortDirection>:
void DIO_SetPortDirection(u8 u8PortIdCopy , u8 u8PortDirCopy){
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_SetPortDirection+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <DIO_SetPortDirection+0x8>
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	6a 83       	std	Y+2, r22	; 0x02
	if((u8PortIdCopy <= DIO_PORTD)){
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	85 30       	cpi	r24, 0x05	; 5
    141c:	90 f5       	brcc	.+100    	; 0x1482 <DIO_SetPortDirection+0x7a>
			switch(u8PortIdCopy){
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3c 83       	std	Y+4, r19	; 0x04
    1426:	2b 83       	std	Y+3, r18	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	d1 f0       	breq	.+52     	; 0x1466 <DIO_SetPortDirection+0x5e>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <DIO_SetPortDirection+0x3e>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 f0       	breq	.+24     	; 0x145c <DIO_SetPortDirection+0x54>
    1444:	1e c0       	rjmp	.+60     	; 0x1482 <DIO_SetPortDirection+0x7a>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	23 30       	cpi	r18, 0x03	; 3
    144c:	31 05       	cpc	r19, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <DIO_SetPortDirection+0x68>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	84 30       	cpi	r24, 0x04	; 4
    1456:	91 05       	cpc	r25, r1
    1458:	81 f0       	breq	.+32     	; 0x147a <DIO_SetPortDirection+0x72>
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <DIO_SetPortDirection+0x7a>
			case DIO_PORTA:
				DDRA = u8PortDirCopy;
    145c:	ea e3       	ldi	r30, 0x3A	; 58
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <DIO_SetPortDirection+0x7a>
				break;
			case DIO_PORTB:
				DDRB = u8PortDirCopy;
    1466:	e7 e3       	ldi	r30, 0x37	; 55
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <DIO_SetPortDirection+0x7a>
				break;
			case DIO_PORTC:
				DDRC = u8PortDirCopy;
    1470:	e4 e3       	ldi	r30, 0x34	; 52
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <DIO_SetPortDirection+0x7a>
				break;
			case DIO_PORTD:
				DDRD = u8PortDirCopy;
    147a:	e1 e3       	ldi	r30, 0x31	; 49
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
				break;
			}

		}
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <GIE_Enable>:
 */
#include "BIT_MATH.h"
#include "avr/io.h"
#include "GIE.h"

void GIE_Enable (void){
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	//SET bit 7 in SREG
	SET_BIT(SREG  ,  SREG_I );
    1498:	af e5       	ldi	r26, 0x5F	; 95
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ef e5       	ldi	r30, 0x5F	; 95
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	8c 93       	st	X, r24

}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GIE_Disable>:
void GIE_Disable(void){
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62

	//CLR bit 7 in SREG
	CLR_BIT(SREG  ,  SREG_I );
    14b4:	af e5       	ldi	r26, 0x5F	; 95
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ef e5       	ldi	r30, 0x5F	; 95
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	8c 93       	st	X, r24

}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <I2C_Init>:
#include "DIO.h"
#include "I2C.h"
//4
#include "avr/io.h"
#include "util/delay.h"
void I2C_Init(u32 SCL_Clock){
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <I2C_Init+0xa>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <I2C_Init+0xc>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	69 83       	std	Y+1, r22	; 0x01
    14da:	7a 83       	std	Y+2, r23	; 0x02
    14dc:	8b 83       	std	Y+3, r24	; 0x03
    14de:	9c 83       	std	Y+4, r25	; 0x04
	//setting the TWBR value
	TWBR = (u8)(((F_CPU / SCL_Clock) -16) /(2*Prescaler));
    14e0:	00 e2       	ldi	r16, 0x20	; 32
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	92 e1       	ldi	r25, 0x12	; 18
    14e8:	aa e7       	ldi	r26, 0x7A	; 122
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	29 81       	ldd	r18, Y+1	; 0x01
    14ee:	3a 81       	ldd	r19, Y+2	; 0x02
    14f0:	4b 81       	ldd	r20, Y+3	; 0x03
    14f2:	5c 81       	ldd	r21, Y+4	; 0x04
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 89 10 	call	0x2112	; 0x2112 <__udivmodsi4>
    14fc:	da 01       	movw	r26, r20
    14fe:	c9 01       	movw	r24, r18
    1500:	40 97       	sbiw	r24, 0x10	; 16
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	b6 95       	lsr	r27
    1508:	a7 95       	ror	r26
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	f8 01       	movw	r30, r16
    1510:	80 83       	st	Z, r24
	//setting prescalar in TWSR
	if(Prescaler ==1){
		CLR_BIT(TWSR ,TWPS0);
    1512:	a1 e2       	ldi	r26, 0x21	; 33
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e1 e2       	ldi	r30, 0x21	; 33
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8e 7f       	andi	r24, 0xFE	; 254
    151e:	8c 93       	st	X, r24
		CLR_BIT(TWSR ,TWPS1);
    1520:	a1 e2       	ldi	r26, 0x21	; 33
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e1 e2       	ldi	r30, 0x21	; 33
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8d 7f       	andi	r24, 0xFD	; 253
    152c:	8c 93       	st	X, r24
	}
	else if(Prescaler == 64){
		SET_BIT(TWSR ,TWPS0);
		SET_BIT(TWSR ,TWPS1);
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <I2C_Start>:


void I2C_Start(void){
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	//CLRing interrupt flag , setting start bit and twi enable
	TWCR = (1<< TWINT) | ( 1<< TWSTA) | ( 1<< TWEN);
    1548:	e6 e5       	ldi	r30, 0x56	; 86
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	84 ea       	ldi	r24, 0xA4	; 164
    154e:	80 83       	st	Z, r24
	//to check if start bit is transmitted , flag should be set if transmission done.
	while((TWCR & (1<< TWINT))==0);
    1550:	e6 e5       	ldi	r30, 0x56	; 86
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	88 23       	and	r24, r24
    1558:	dc f7       	brge	.-10     	; 0x1550 <I2C_Start+0x10>
	//check statusto check start ack
	//while(TWSR != I2C_START_ACK);
}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <I2C_Stop>:

void I2C_Stop(void){
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
	//CLRing interrupt flag , setting stop bit and twi enable
	TWCR = (1<< TWINT) | ( 1<< TWSTO) | ( 1<< TWEN);
    1568:	e6 e5       	ldi	r30, 0x56	; 86
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	84 e9       	ldi	r24, 0x94	; 148
    156e:	80 83       	st	Z, r24
}
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <I2C_SetAddress>:



void I2C_SetAddress(u8 u8AddressCopy){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
	//setting 7 MSB of address register
	TWAR = u8AddressCopy;
    1582:	e2 e2       	ldi	r30, 0x22	; 34
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	80 83       	st	Z, r24

}
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <I2C_Read>:



u8 I2C_Read(u8 u8read){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<< TWINT) | ( 1<< TWEA) | ( 1<< TWEN);
    159e:	e6 e5       	ldi	r30, 0x56	; 86
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	84 ec       	ldi	r24, 0xC4	; 196
    15a4:	80 83       	st	Z, r24
	while(!(TWCR & (1<< TWINT)));
    15a6:	e6 e5       	ldi	r30, 0x56	; 86
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 23       	and	r24, r24
    15ae:	dc f7       	brge	.-10     	; 0x15a6 <I2C_Read+0x14>

	return TWDR;
    15b0:	e3 e2       	ldi	r30, 0x23	; 35
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
}
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <I2C_ReadSlave>:


u8 I2C_ReadSlave(u8 u8read){
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <I2C_ReadSlave+0x6>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01

	TWCR = (1<< TWINT) | ( 1<< TWEA) | ( 1<< TWEN);
    15ca:	e6 e5       	ldi	r30, 0x56	; 86
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	84 ec       	ldi	r24, 0xC4	; 196
    15d0:	80 83       	st	Z, r24
	while(!(TWCR & (1<< TWINT)));
    15d2:	e6 e5       	ldi	r30, 0x56	; 86
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	88 23       	and	r24, r24
    15da:	dc f7       	brge	.-10     	; 0x15d2 <I2C_ReadSlave+0x14>
	while(TWSR != I2C_ADDRESS_ACK);
    15dc:	e1 e2       	ldi	r30, 0x21	; 33
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 36       	cpi	r24, 0x60	; 96
    15e4:	d9 f7       	brne	.-10     	; 0x15dc <I2C_ReadSlave+0x1e>

	if(u8read ==1){
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	a1 f4       	brne	.+40     	; 0x1614 <I2C_ReadSlave+0x56>
		TWCR = (1<< TWINT) | ( 1<< TWEA) | ( 1<< TWEN);
    15ec:	e6 e5       	ldi	r30, 0x56	; 86
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	84 ec       	ldi	r24, 0xC4	; 196
    15f2:	80 83       	st	Z, r24
		while(!(TWCR & (1<< TWINT)));
    15f4:	e6 e5       	ldi	r30, 0x56	; 86
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 23       	and	r24, r24
    15fc:	dc f7       	brge	.-10     	; 0x15f4 <I2C_ReadSlave+0x36>
		while(TWSR != I2C_DATA_ACK);
    15fe:	e1 e2       	ldi	r30, 0x21	; 33
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 38       	cpi	r24, 0x80	; 128
    1606:	d9 f7       	brne	.-10     	; 0x15fe <I2C_ReadSlave+0x40>
		return TWDR;
    1608:	e3 e2       	ldi	r30, 0x23	; 35
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8a 83       	std	Y+2, r24	; 0x02
	}

}
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <I2C_ReadSlave+0x56>
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <I2C_Write>:


void I2C_Write(u8 u8write){
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	0f 92       	push	r0
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	89 83       	std	Y+1, r24	; 0x01
	TWDR =u8write;
    162a:	e3 e2       	ldi	r30, 0x23	; 35
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	80 83       	st	Z, r24
	// CLR TWINT bit in TWCR to start transmission
	TWCR = (1<< TWINT)  | ( 1<< TWEN);
    1632:	e6 e5       	ldi	r30, 0x56	; 86
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	84 e8       	ldi	r24, 0x84	; 132
    1638:	80 83       	st	Z, r24
	while(!(TWCR & (1<< TWINT)));
    163a:	e6 e5       	ldi	r30, 0x56	; 86
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 23       	and	r24, r24
    1642:	dc f7       	brge	.-10     	; 0x163a <I2C_Write+0x1c>
}
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <EEPROM_WriteByte>:




void EEPROM_WriteByte(u8 address, u8 data) {
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	60 97       	sbiw	r28, 0x10	; 16
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	8f 87       	std	Y+15, r24	; 0x0f
    1662:	68 8b       	std	Y+16, r22	; 0x10
    I2C_Start();
    1664:	0e 94 a0 0a 	call	0x1540	; 0x1540 <I2C_Start>
    I2C_Write(EEPROM_ADDRESS | ((address) & 0x0E));
    1668:	8f 85       	ldd	r24, Y+15	; 0x0f
    166a:	8e 70       	andi	r24, 0x0E	; 14
    166c:	80 6a       	ori	r24, 0xA0	; 160
    166e:	0e 94 0f 0b 	call	0x161e	; 0x161e <I2C_Write>
    I2C_Write(address & 0xFF);
    1672:	8f 85       	ldd	r24, Y+15	; 0x0f
    1674:	0e 94 0f 0b 	call	0x161e	; 0x161e <I2C_Write>
    I2C_Write(data);
    1678:	88 89       	ldd	r24, Y+16	; 0x10
    167a:	0e 94 0f 0b 	call	0x161e	; 0x161e <I2C_Write>
    I2C_Stop();
    167e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_Stop>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e2       	ldi	r26, 0x20	; 32
    1688:	b1 e4       	ldi	r27, 0x41	; 65
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	ad 87       	std	Y+13, r26	; 0x0d
    1690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8f 83       	std	Y+7, r24	; 0x07
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	a9 87       	std	Y+9, r26	; 0x09
    16b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <EEPROM_WriteByte+0x88>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <EEPROM_WriteByte+0x106>
	else if (__tmp > 65535)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <EEPROM_WriteByte+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <EEPROM_WriteByte+0xe8>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <EEPROM_WriteByte+0xd6>
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <EEPROM_WriteByte+0xca>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <EEPROM_WriteByte+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <EEPROM_WriteByte+0x112>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);  // Delay for EEPROM write cycle completion
}
    1766:	60 96       	adiw	r28, 0x10	; 16
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <EEPROM_ReadByte>:

u8 EEPROM_ReadByte(u8 address) {
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <EEPROM_ReadByte+0x6>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	8a 83       	std	Y+2, r24	; 0x02
    u8 data;
    I2C_Start();
    1784:	0e 94 a0 0a 	call	0x1540	; 0x1540 <I2C_Start>
    I2C_Write(EEPROM_ADDRESS | ((address) & 0x0E));
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	8e 70       	andi	r24, 0x0E	; 14
    178c:	80 6a       	ori	r24, 0xA0	; 160
    178e:	0e 94 0f 0b 	call	0x161e	; 0x161e <I2C_Write>
    I2C_Write(address & 0xFF);
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	0e 94 0f 0b 	call	0x161e	; 0x161e <I2C_Write>
    I2C_Start();
    1798:	0e 94 a0 0a 	call	0x1540	; 0x1540 <I2C_Start>
    I2C_Write(EEPROM_ADDRESS | 1);
    179c:	81 ea       	ldi	r24, 0xA1	; 161
    179e:	0e 94 0f 0b 	call	0x161e	; 0x161e <I2C_Write>
    data = I2C_Read(0);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <I2C_Read>
    17a8:	89 83       	std	Y+1, r24	; 0x01
    I2C_Stop();
    17aa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_Stop>
    return data;
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <TIMER2_Init>:
#include "avr/io.h"
#include "util/delay.h"
#include "stdio.h"
#include "TIMER.h"
void (*Global_pointer)(void)=NULL;
void TIMER2_Init(void){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	//for ctc mode
	CLR_BIT(TCCR2 ,TCCR2_WGM20);
    17c2:	a5 e4       	ldi	r26, 0x45	; 69
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e4       	ldi	r30, 0x45	; 69
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8f 7b       	andi	r24, 0xBF	; 191
    17ce:	8c 93       	st	X, r24
	SET_BIT(TCCR2 ,TCCR2_WGM21);
    17d0:	a5 e4       	ldi	r26, 0x45	; 69
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e4       	ldi	r30, 0x45	; 69
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	88 60       	ori	r24, 0x08	; 8
    17dc:	8c 93       	st	X, r24
//enabling timer2
	SET_BIT(TIMSK ,TIMSK_OCIE2);
    17de:	a9 e5       	ldi	r26, 0x59	; 89
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e9 e5       	ldi	r30, 0x59	; 89
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 68       	ori	r24, 0x80	; 128
    17ea:	8c 93       	st	X, r24




//prescalar :256
	CLR_BIT(TCCR2 ,TCCR2_CS20);
    17ec:	a5 e4       	ldi	r26, 0x45	; 69
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e4       	ldi	r30, 0x45	; 69
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8e 7f       	andi	r24, 0xFE	; 254
    17f8:	8c 93       	st	X, r24
	SET_BIT(TCCR2 ,TCCR2_CS21);
    17fa:	a5 e4       	ldi	r26, 0x45	; 69
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e4       	ldi	r30, 0x45	; 69
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	82 60       	ori	r24, 0x02	; 2
    1806:	8c 93       	st	X, r24
	SET_BIT(TCCR2 ,TCCR2_CS22);
    1808:	a5 e4       	ldi	r26, 0x45	; 69
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e5 e4       	ldi	r30, 0x45	; 69
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	84 60       	ori	r24, 0x04	; 4
    1814:	8c 93       	st	X, r24


}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <TIMER2_OC2_ON>:


void TIMER2_OC2_ON(void){
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	//OC2 enabling
	SET_BIT(TCCR2 ,COM20);
    1824:	a5 e4       	ldi	r26, 0x45	; 69
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e5 e4       	ldi	r30, 0x45	; 69
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 61       	ori	r24, 0x10	; 16
    1830:	8c 93       	st	X, r24
	CLR_BIT(TCCR2 ,COM21);
    1832:	a5 e4       	ldi	r26, 0x45	; 69
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e4       	ldi	r30, 0x45	; 69
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 7d       	andi	r24, 0xDF	; 223
    183e:	8c 93       	st	X, r24

}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <TIMER2_OC2_OFF>:
void TIMER2_OC2_OFF(void){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	//OC2 DISABLE
	CLR_BIT(TCCR2 ,COM20);
    184e:	a5 e4       	ldi	r26, 0x45	; 69
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e5 e4       	ldi	r30, 0x45	; 69
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 7e       	andi	r24, 0xEF	; 239
    185a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2 ,COM21);
    185c:	a5 e4       	ldi	r26, 0x45	; 69
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e4       	ldi	r30, 0x45	; 69
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8f 7d       	andi	r24, 0xDF	; 223
    1868:	8c 93       	st	X, r24

}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <TIMER2_SetCompareValue>:

void TIMER2_SetCompareValue(u8 u8_TicksNumber){
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = u8_TicksNumber;
    187c:	e3 e4       	ldi	r30, 0x43	; 67
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	80 83       	st	Z, r24
}
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <CallBack_func>:

u8 CallBack_func(void (*local_pointer)(void)){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <CallBack_func+0x6>
    1892:	0f 92       	push	r0
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	9b 83       	std	Y+3, r25	; 0x03
    189a:	8a 83       	std	Y+2, r24	; 0x02
	u8 error_state = OK;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	89 83       	std	Y+1, r24	; 0x01
	if(local_pointer !=NULL){
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <CallBack_func+0x2a>
		Global_pointer =local_pointer;
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	90 93 6b 00 	sts	0x006B, r25
    18b0:	80 93 6a 00 	sts	0x006A, r24
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <CallBack_func+0x2c>
	}
	else{
		error_state = NOK;
    18b6:	19 82       	std	Y+1, r1	; 0x01
	}
	return error_state;
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void){
    18c6:	1f 92       	push	r1
    18c8:	0f 92       	push	r0
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	0f 92       	push	r0
    18ce:	11 24       	eor	r1, r1
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
	if(Global_pointer !=NULL){
    18f0:	80 91 6a 00 	lds	r24, 0x006A
    18f4:	90 91 6b 00 	lds	r25, 0x006B
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	29 f0       	breq	.+10     	; 0x1906 <__vector_4+0x40>
	Global_pointer();
    18fc:	e0 91 6a 00 	lds	r30, 0x006A
    1900:	f0 91 6b 00 	lds	r31, 0x006B
    1904:	09 95       	icall
	}
}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	7f 91       	pop	r23
    1918:	6f 91       	pop	r22
    191a:	5f 91       	pop	r21
    191c:	4f 91       	pop	r20
    191e:	3f 91       	pop	r19
    1920:	2f 91       	pop	r18
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <UART_Init>:
#include "DIO.h"
#include "avr/io.h"
#include "UART.h"

void UART_Init(void)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	// Set Baud Rate 9600
	UBRRL=51;
    1934:	e9 e2       	ldi	r30, 0x29	; 41
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	83 e3       	ldi	r24, 0x33	; 51
    193a:	80 83       	st	Z, r24
	UBRRH = 0;
    193c:	e0 e4       	ldi	r30, 0x40	; 64
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	10 82       	st	Z, r1

	SET_BIT(UCSRC,URSEL);
    1942:	a0 e4       	ldi	r26, 0x40	; 64
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e0 e4       	ldi	r30, 0x40	; 64
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 68       	ori	r24, 0x80	; 128
    194e:	8c 93       	st	X, r24
	// Set Frame Format -> 8 data, 1 stop, No Parity
	//  Word Size [8 bits], By default = 8 bits
	SET_BIT(UCSRC,UCSZ0);
    1950:	a0 e4       	ldi	r26, 0x40	; 64
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e0 e4       	ldi	r30, 0x40	; 64
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	82 60       	ori	r24, 0x02	; 2
    195c:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
    195e:	a0 e4       	ldi	r26, 0x40	; 64
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e0 e4       	ldi	r30, 0x40	; 64
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	84 60       	ori	r24, 0x04	; 4
    196a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
    196c:	aa e2       	ldi	r26, 0x2A	; 42
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ea e2       	ldi	r30, 0x2A	; 42
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8b 7f       	andi	r24, 0xFB	; 251
    1978:	8c 93       	st	X, r24

	//Disable Parity
	CLR_BIT(UCSRC,UPM0);
    197a:	a0 e4       	ldi	r26, 0x40	; 64
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e0 e4       	ldi	r30, 0x40	; 64
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8f 7e       	andi	r24, 0xEF	; 239
    1986:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UPM1);
    1988:	a0 e4       	ldi	r26, 0x40	; 64
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e0 e4       	ldi	r30, 0x40	; 64
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 7d       	andi	r24, 0xDF	; 223
    1994:	8c 93       	st	X, r24

	//Stop bit --> 1 bit
	CLR_BIT(UCSRC,USBS);
    1996:	a0 e4       	ldi	r26, 0x40	; 64
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e0 e4       	ldi	r30, 0x40	; 64
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	87 7f       	andi	r24, 0xF7	; 247
    19a2:	8c 93       	st	X, r24
	SET_BIT( u8UCSRCValue_Local , UCSZ1);
	SET_BIT( u8UCSRCValue_Local , UCSZ0);
    UCSRC =  u8UCSRCValue_Local ; */

	//Enable TX ,RX
	SET_BIT( UCSRB,TXEN);
    19a4:	aa e2       	ldi	r26, 0x2A	; 42
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ea e2       	ldi	r30, 0x2A	; 42
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	88 60       	ori	r24, 0x08	; 8
    19b0:	8c 93       	st	X, r24
	SET_BIT( UCSRB,RXEN);
    19b2:	aa e2       	ldi	r26, 0x2A	; 42
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ea e2       	ldi	r30, 0x2A	; 42
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 61       	ori	r24, 0x10	; 16
    19be:	8c 93       	st	X, r24

}
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <USART_SendData>:


void USART_SendData(u8 u8data_Copy)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : wait flag UDRFE to finish
	// Wait until transmission Register Empty
	while(GET_BIT(UCSRA , UDRE) == 0);
    19d2:	eb e2       	ldi	r30, 0x2B	; 43
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	82 95       	swap	r24
    19da:	86 95       	lsr	r24
    19dc:	87 70       	andi	r24, 0x07	; 7
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	a1 f3       	breq	.-24     	; 0x19d2 <USART_SendData+0xc>

	// step 2 : send Data
	UDR = u8data_Copy; //UDR is buffer register
    19ea:	ec e2       	ldi	r30, 0x2C	; 44
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	80 83       	st	Z, r24
}
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <USART_voidSendString>:


void USART_voidSendString(u8* Copy_pu8Data){
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <USART_voidSendString+0x6>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	0b c0       	rjmp	.+22     	; 0x1a20 <USART_voidSendString+0x26>
	while((*Copy_pu8Data) != 0){
		USART_SendData(*Copy_pu8Data++);
    1a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0e:	20 81       	ld	r18, Z
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	82 2f       	mov	r24, r18
    1a1c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
	UDR = u8data_Copy; //UDR is buffer register
}


void USART_voidSendString(u8* Copy_pu8Data){
	while((*Copy_pu8Data) != 0){
    1a20:	e9 81       	ldd	r30, Y+1	; 0x01
    1a22:	fa 81       	ldd	r31, Y+2	; 0x02
    1a24:	80 81       	ld	r24, Z
    1a26:	88 23       	and	r24, r24
    1a28:	81 f7       	brne	.-32     	; 0x1a0a <USART_voidSendString+0x10>
		USART_SendData(*Copy_pu8Data++);
	}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <USART_ReceiveData>:


u8   USART_ReceiveData(void)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	// step 1 : wait flag RXC to finish
	while(GET_BIT(UCSRA,RXC)==0) ;
    1a3c:	eb e2       	ldi	r30, 0x2B	; 43
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 23       	and	r24, r24
    1a44:	dc f7       	brge	.-10     	; 0x1a3c <USART_ReceiveData+0x8>
	// step 2 : Receive Data
	return UDR ;
    1a46:	ec e2       	ldi	r30, 0x2C	; 44
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <USART_voidReceiveString>:
void USART_voidReceiveString(u8* Copy_pu8Data){
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <USART_voidReceiveString+0x6>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <USART_voidReceiveString+0x8>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
	u8  x = USART_ReceiveData() ,i=0;
    1a62:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	19 82       	std	Y+1, r1	; 0x01
    1a6a:	10 c0       	rjmp	.+32     	; 0x1a8c <USART_voidReceiveString+0x3a>
	while(x != '.'){
		Copy_pu8Data[i++] = x;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	fc 01       	movw	r30, r24
    1a78:	e2 0f       	add	r30, r18
    1a7a:	f3 1f       	adc	r31, r19
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	80 83       	st	Z, r24
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	89 83       	std	Y+1, r24	; 0x01
		x = USART_ReceiveData();
    1a86:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
	// step 2 : Receive Data
	return UDR ;
}
void USART_voidReceiveString(u8* Copy_pu8Data){
	u8  x = USART_ReceiveData() ,i=0;
	while(x != '.'){
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	8e 32       	cpi	r24, 0x2E	; 46
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <USART_voidReceiveString+0x1a>
		Copy_pu8Data[i++] = x;
		x = USART_ReceiveData();
	}
	Copy_pu8Data[i]= '\0';
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e2 0f       	add	r30, r18
    1aa0:	f3 1f       	adc	r31, r19
    1aa2:	10 82       	st	Z, r1

}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <main>:
u8 passConfirm(u8 *recieveSec);
void delaySec(u8 sec);
void convertnsend(u8 val);
void Buzzer(void);
int main()
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	2e 97       	sbiw	r28, 0x0e	; 14
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	63 e0       	ldi	r22, 0x03	; 3
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_SetPinDirection>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	63 e0       	ldi	r22, 0x03	; 3
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>

	ADC_Init();
    1ae4:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>
    MOTOR_Init();
    1ae8:	0e 94 d3 06 	call	0xda6	; 0xda6 <MOTOR_Init>
    TIMER0_Init();
    1aec:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIMER0_Init>
    UART_Init();
    1af0:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_Init>
    while(USART_ReceiveData() != MC2_READY){}
    1af4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1af8:	80 31       	cpi	r24, 0x10	; 16
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <main+0x42>
    I2C_Init(8000000);
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	72 e1       	ldi	r23, 0x12	; 18
    1b00:	8a e7       	ldi	r24, 0x7A	; 122
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <I2C_Init>

    u8 recieve[6];
    u8 recieveSec[6];
    u8 options = 0;
    1b08:	1a 82       	std	Y+2, r1	; 0x02
    u8 temp;

    while(1)
    {

    	passwordSet(recieve);
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	03 96       	adiw	r24, 0x03	; 3
    1b0e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <passwordSet>
		temp = ADC_Read();
    1b12:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ADC_Read>
    1b16:	89 83       	std	Y+1, r24	; 0x01
		while(USART_ReceiveData() != MC2_READY){}
    1b18:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1b1c:	80 31       	cpi	r24, 0x10	; 16
    1b1e:	e1 f7       	brne	.-8      	; 0x1b18 <main+0x66>
		USART_SendData(temp);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
		if(temp >= 30 && temp <=50)
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	8e 31       	cpi	r24, 0x1E	; 30
    1b2a:	78 f0       	brcs	.+30     	; 0x1b4a <main+0x98>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	83 33       	cpi	r24, 0x33	; 51
    1b30:	60 f4       	brcc	.+24     	; 0x1b4a <main+0x98>
		{
			MOTOR_CWMotion();
    1b32:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <MOTOR_CWMotion>

				OCR0 = 150;
    1b36:	ec e5       	ldi	r30, 0x5C	; 92
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	86 e9       	ldi	r24, 0x96	; 150
    1b3c:	80 83       	st	Z, r24
				DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	63 e0       	ldi	r22, 0x03	; 3
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <main+0xc0>


		}else if(temp > 50){
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	83 33       	cpi	r24, 0x33	; 51
    1b4e:	50 f0       	brcs	.+20     	; 0x1b64 <main+0xb2>
			OCR0 = 250;
    1b50:	ec e5       	ldi	r30, 0x5C	; 92
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8a ef       	ldi	r24, 0xFA	; 250
    1b56:	80 83       	st	Z, r24
			DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	63 e0       	ldi	r22, 0x03	; 3
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <main+0xc0>

		}
		else
		{
			MOTOR_StopMotion();
    1b64:	0e 94 1a 07 	call	0xe34	; 0xe34 <MOTOR_StopMotion>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	63 e0       	ldi	r22, 0x03	; 3
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 2b 07 	call	0xe56	; 0xe56 <DIO_SetPinValue>

		}
    	while(passConfirm(recieveSec)==UNMATCHED_PASS);
    1b72:	ce 01       	movw	r24, r28
    1b74:	09 96       	adiw	r24, 0x09	; 9
    1b76:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <passConfirm>
    1b7a:	83 33       	cpi	r24, 0x33	; 51
    1b7c:	d1 f3       	breq	.-12     	; 0x1b72 <main+0xc0>
    	 USART_SendData(MC2_READY);
    1b7e:	80 e1       	ldi	r24, 0x10	; 16
    1b80:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <main+0xda>
    	while((options != ACTIVATE_MOTOR) && (options != ERASE_EEPROM))
    	{
    		options = USART_ReceiveData();
    1b86:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
			DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);

		}
    	while(passConfirm(recieveSec)==UNMATCHED_PASS);
    	 USART_SendData(MC2_READY);
    	while((options != ACTIVATE_MOTOR) && (options != ERASE_EEPROM))
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	82 32       	cpi	r24, 0x22	; 34
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <main+0xe6>
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	86 36       	cpi	r24, 0x66	; 102
    1b96:	b9 f7       	brne	.-18     	; 0x1b86 <main+0xd4>
    		options = USART_ReceiveData();
    	}



    	if(options == ACTIVATE_MOTOR)
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	82 32       	cpi	r24, 0x22	; 34
    1b9c:	59 f4       	brne	.+22     	; 0x1bb4 <main+0x102>
    	{  TIMER2_Init();
    1b9e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <TIMER2_Init>
    		CallBack_func(&TIMER2_ISR);
    1ba2:	86 ee       	ldi	r24, 0xE6	; 230
    1ba4:	9d e0       	ldi	r25, 0x0D	; 13
    1ba6:	0e 94 46 0c 	call	0x188c	; 0x188c <CallBack_func>
    		DOOR_Init();
    1baa:	0e 94 a2 06 	call	0xd44	; 0xd44 <DOOR_Init>
    		TIMER2_ISR();
    1bae:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <TIMER2_ISR>
    1bb2:	ab cf       	rjmp	.-170    	; 0x1b0a <main+0x58>
    	}
    	else if(options == ERASE_EEPROM)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	86 36       	cpi	r24, 0x66	; 102
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <main+0x10a>
    1bba:	a7 cf       	rjmp	.-178    	; 0x1b0a <main+0x58>
    	{
    		setPassFlag= 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	80 93 6c 00 	sts	0x006C, r24
    		 passwordSet(recieve);
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	03 96       	adiw	r24, 0x03	; 3
    1bc6:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <passwordSet>
    1bca:	9f cf       	rjmp	.-194    	; 0x1b0a <main+0x58>

00001bcc <TIMER2_ISR>:
}


//for 15 seconds , 256 prescalars , ocr2 =250 , counts 1875
//for 3 seconds , 256 prescalars , ocr2 =250 , counts 375
void TIMER2_ISR(void){
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	static u16 count=0;
	static u8 flag =0;
	count++;
    1bd4:	80 91 6e 00 	lds	r24, 0x006E
    1bd8:	90 91 6f 00 	lds	r25, 0x006F
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	90 93 6f 00 	sts	0x006F, r25
    1be2:	80 93 6e 00 	sts	0x006E, r24
	if(flag ==0){
    1be6:	80 91 6d 00 	lds	r24, 0x006D
    1bea:	88 23       	and	r24, r24
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <TIMER2_ISR+0x30>
		TIMER2_OC2_ON();
    1bee:	0e 94 0e 0c 	call	0x181c	; 0x181c <TIMER2_OC2_ON>
		DOOR_CwMotion();
    1bf2:	0e 94 80 06 	call	0xd00	; 0xd00 <DOOR_CwMotion>
		TIMER2_SetCompareValue(250);
    1bf6:	8a ef       	ldi	r24, 0xFA	; 250
    1bf8:	0e 94 38 0c 	call	0x1870	; 0x1870 <TIMER2_SetCompareValue>
	}
	if((count==1300) && (flag ==0)){
    1bfc:	80 91 6e 00 	lds	r24, 0x006E
    1c00:	90 91 6f 00 	lds	r25, 0x006F
    1c04:	25 e0       	ldi	r18, 0x05	; 5
    1c06:	84 31       	cpi	r24, 0x14	; 20
    1c08:	92 07       	cpc	r25, r18
    1c0a:	91 f4       	brne	.+36     	; 0x1c30 <TIMER2_ISR+0x64>
    1c0c:	80 91 6d 00 	lds	r24, 0x006D
    1c10:	88 23       	and	r24, r24
    1c12:	71 f4       	brne	.+28     	; 0x1c30 <TIMER2_ISR+0x64>
		DOOR_Stop();
    1c14:	0e 94 c2 06 	call	0xd84	; 0xd84 <DOOR_Stop>
		TIMER2_SetCompareValue(250);
    1c18:	8a ef       	ldi	r24, 0xFA	; 250
    1c1a:	0e 94 38 0c 	call	0x1870	; 0x1870 <TIMER2_SetCompareValue>
		count=0;
    1c1e:	10 92 6f 00 	sts	0x006F, r1
    1c22:	10 92 6e 00 	sts	0x006E, r1
		flag++;
    1c26:	80 91 6d 00 	lds	r24, 0x006D
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	80 93 6d 00 	sts	0x006D, r24
	}

	if((count==300) && (flag ==1)){
    1c30:	80 91 6e 00 	lds	r24, 0x006E
    1c34:	90 91 6f 00 	lds	r25, 0x006F
    1c38:	21 e0       	ldi	r18, 0x01	; 1
    1c3a:	8c 32       	cpi	r24, 0x2C	; 44
    1c3c:	92 07       	cpc	r25, r18
    1c3e:	79 f4       	brne	.+30     	; 0x1c5e <TIMER2_ISR+0x92>
    1c40:	80 91 6d 00 	lds	r24, 0x006D
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	59 f4       	brne	.+22     	; 0x1c5e <TIMER2_ISR+0x92>
		DOOR_CCwMotion();
    1c48:	0e 94 91 06 	call	0xd22	; 0xd22 <DOOR_CCwMotion>
		count=0;
    1c4c:	10 92 6f 00 	sts	0x006F, r1
    1c50:	10 92 6e 00 	sts	0x006E, r1
		flag++;
    1c54:	80 91 6d 00 	lds	r24, 0x006D
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    1c5a:	80 93 6d 00 	sts	0x006D, r24
	}

	if((count==1300) && (flag ==2)){
    1c5e:	80 91 6e 00 	lds	r24, 0x006E
    1c62:	90 91 6f 00 	lds	r25, 0x006F
    1c66:	25 e0       	ldi	r18, 0x05	; 5
    1c68:	84 31       	cpi	r24, 0x14	; 20
    1c6a:	92 07       	cpc	r25, r18
    1c6c:	c1 f4       	brne	.+48     	; 0x1c9e <TIMER2_ISR+0xd2>
    1c6e:	80 91 6d 00 	lds	r24, 0x006D
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	a1 f4       	brne	.+40     	; 0x1c9e <TIMER2_ISR+0xd2>
		DOOR_Stop();
    1c76:	0e 94 c2 06 	call	0xd84	; 0xd84 <DOOR_Stop>
		TIMER2_OC2_OFF();
    1c7a:	0e 94 23 0c 	call	0x1846	; 0x1846 <TIMER2_OC2_OFF>
		count=0;
    1c7e:	10 92 6f 00 	sts	0x006F, r1
    1c82:	10 92 6e 00 	sts	0x006E, r1
		flag=0;
    1c86:	10 92 6d 00 	sts	0x006D, r1
		CLR_BIT(TIMSK ,TIMSK_OCIE2);
    1c8a:	a9 e5       	ldi	r26, 0x59	; 89
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e9 e5       	ldi	r30, 0x59	; 89
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 77       	andi	r24, 0x7F	; 127
    1c96:	8c 93       	st	X, r24
		//while(USART_ReceiveData() != MC2_READY){}
		USART_SendData(DOOR_DONE);
    1c98:	80 e5       	ldi	r24, 0x50	; 80
    1c9a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
	}
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <passwordSet>:



void passwordSet(u8 *recieve)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	2b 97       	sbiw	r28, 0x0b	; 11
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	9b 87       	std	Y+11, r25	; 0x0b
    1cba:	8a 87       	std	Y+10, r24	; 0x0a
	u8 setOrNot= EEPROM_ReadByte(0x28);
    1cbc:	88 e2       	ldi	r24, 0x28	; 40
    1cbe:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_ReadByte>
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
	u8 recieveSec[6];

	if(setPassFlag  == 0)
    1cc4:	80 91 6c 00 	lds	r24, 0x006C
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f0       	breq	.+2      	; 0x1cce <passwordSet+0x2a>
    1ccc:	44 c0       	rjmp	.+136    	; 0x1d56 <passwordSet+0xb2>
	{
		while(USART_ReceiveData() != MC2_READY){}
    1cce:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1cd2:	80 31       	cpi	r24, 0x10	; 16
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <passwordSet+0x2a>
			USART_SendData(setOrNot);
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
if(setOrNot == N_AVAILABLE)
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <passwordSet+0x40>
    1ce2:	67 c0       	rjmp	.+206    	; 0x1db2 <passwordSet+0x10e>
{
	       USART_SendData(MC2_READY);
    1ce4:	80 e1       	ldi	r24, 0x10	; 16
    1ce6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
	       USART_voidReceiveString(recieve);
    1cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cee:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <USART_voidReceiveString>

	    	u8 i =0;
    1cf2:	1a 82       	std	Y+2, r1	; 0x02
    1cf4:	1a c0       	rjmp	.+52     	; 0x1d2a <passwordSet+0x86>

	        while(recieve[i] != '\0')
	       {
		   EEPROM_WriteByte(i*8, recieve[i]);
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d14:	fc 01       	movw	r30, r24
    1d16:	e2 0f       	add	r30, r18
    1d18:	f3 1f       	adc	r31, r19
    1d1a:	90 81       	ld	r25, Z
    1d1c:	84 2f       	mov	r24, r20
    1d1e:	69 2f       	mov	r22, r25
    1d20:	0e 94 26 0b 	call	0x164c	; 0x164c <EEPROM_WriteByte>
	       i++;
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	       USART_SendData(MC2_READY);
	       USART_voidReceiveString(recieve);

	    	u8 i =0;

	        while(recieve[i] != '\0')
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d34:	fc 01       	movw	r30, r24
    1d36:	e2 0f       	add	r30, r18
    1d38:	f3 1f       	adc	r31, r19
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 23       	and	r24, r24
    1d3e:	d9 f6       	brne	.-74     	; 0x1cf6 <passwordSet+0x52>
	       {
		   EEPROM_WriteByte(i*8, recieve[i]);
	       i++;
	       }
	       while( passwordComp(recieveSec) == UNMATCHED_PASS);
    1d40:	ce 01       	movw	r24, r28
    1d42:	04 96       	adiw	r24, 0x04	; 4
    1d44:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <passwordComp>
    1d48:	83 33       	cpi	r24, 0x33	; 51
    1d4a:	d1 f3       	breq	.-12     	; 0x1d40 <passwordSet+0x9c>
	       EEPROM_WriteByte(0x28,AVAILABLE);
    1d4c:	88 e2       	ldi	r24, 0x28	; 40
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	0e 94 26 0b 	call	0x164c	; 0x164c <EEPROM_WriteByte>
    1d54:	2e c0       	rjmp	.+92     	; 0x1db2 <passwordSet+0x10e>
}
	}else
	{
		USART_SendData(MC2_READY);
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>

		            USART_voidReceiveString(recieve);
    1d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d60:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <USART_voidReceiveString>

			    	u8 i =0;
    1d64:	19 82       	std	Y+1, r1	; 0x01
    1d66:	1a c0       	rjmp	.+52     	; 0x1d9c <passwordSet+0xf8>

			        while(recieve[i] != '\0')
			       {
				   EEPROM_WriteByte(i*8, recieve[i]);
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	90 81       	ld	r25, Z
    1d8e:	84 2f       	mov	r24, r20
    1d90:	69 2f       	mov	r22, r25
    1d92:	0e 94 26 0b 	call	0x164c	; 0x164c <EEPROM_WriteByte>
			       i++;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	89 83       	std	Y+1, r24	; 0x01

		            USART_voidReceiveString(recieve);

			    	u8 i =0;

			        while(recieve[i] != '\0')
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	80 81       	ld	r24, Z
    1dae:	88 23       	and	r24, r24
    1db0:	d9 f6       	brne	.-74     	; 0x1d68 <passwordSet+0xc4>
			       i++;
			       }


	}
}
    1db2:	2b 96       	adiw	r28, 0x0b	; 11
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <passwordComp>:
u8 passwordComp(u8 *recieveSec)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <passwordComp+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <passwordComp+0x8>
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
	u8 confirm = MATCHED_PASS;
    1dd4:	85 e5       	ldi	r24, 0x55	; 85
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
	USART_SendData(MC2_READY);
    1dd8:	80 e1       	ldi	r24, 0x10	; 16
    1dda:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
	USART_voidReceiveString(recieveSec);
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <USART_voidReceiveString>
for(u8 j =0;j <5; j++ )
    1de6:	19 82       	std	Y+1, r1	; 0x01
    1de8:	1c c0       	rjmp	.+56     	; 0x1e22 <passwordComp+0x5e>
{

	if( EEPROM_ReadByte(j*8) != recieveSec[j])
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_ReadByte>
    1e00:	48 2f       	mov	r20, r24
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	80 81       	ld	r24, Z
    1e14:	48 17       	cp	r20, r24
    1e16:	11 f0       	breq	.+4      	; 0x1e1c <passwordComp+0x58>
	{

		confirm = UNMATCHED_PASS;
    1e18:	83 e3       	ldi	r24, 0x33	; 51
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
u8 passwordComp(u8 *recieveSec)
{
	u8 confirm = MATCHED_PASS;
	USART_SendData(MC2_READY);
	USART_voidReceiveString(recieveSec);
for(u8 j =0;j <5; j++ )
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	85 30       	cpi	r24, 0x05	; 5
    1e26:	08 f3       	brcs	.-62     	; 0x1dea <passwordComp+0x26>
		confirm = UNMATCHED_PASS;
	}


}
while(USART_ReceiveData() != MC2_READY){}
    1e28:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <USART_ReceiveData>
    1e2c:	80 31       	cpi	r24, 0x10	; 16
    1e2e:	e1 f7       	brne	.-8      	; 0x1e28 <passwordComp+0x64>
USART_SendData(confirm);
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <USART_SendData>
return confirm;
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <passConfirm>:
u8 passConfirm(u8 *recieveSec)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <passConfirm+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <passConfirm+0x8>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9b 83       	std	Y+3, r25	; 0x03
    1e54:	8a 83       	std	Y+2, r24	; 0x02
	 u8 number = 0;
    1e56:	19 82       	std	Y+1, r1	; 0x01
    1e58:	0b c0       	rjmp	.+22     	; 0x1e70 <passConfirm+0x2a>
	while( passwordComp(recieveSec) == UNMATCHED_PASS )
	{
		number++;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	8f 5f       	subi	r24, 0xFF	; 255
    1e5e:	89 83       	std	Y+1, r24	; 0x01
		if(number == STOP)
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	83 30       	cpi	r24, 0x03	; 3
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <passConfirm+0x2a>
		{
			Buzzer();
    1e66:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <Buzzer>
			return UNMATCHED_PASS;
    1e6a:	83 e3       	ldi	r24, 0x33	; 51
    1e6c:	8c 83       	std	Y+4, r24	; 0x04
    1e6e:	08 c0       	rjmp	.+16     	; 0x1e80 <passConfirm+0x3a>

}
u8 passConfirm(u8 *recieveSec)
{
	 u8 number = 0;
	while( passwordComp(recieveSec) == UNMATCHED_PASS )
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <passwordComp>
    1e78:	83 33       	cpi	r24, 0x33	; 51
    1e7a:	79 f3       	breq	.-34     	; 0x1e5a <passConfirm+0x14>
			Buzzer();
			return UNMATCHED_PASS;

		}
	}
	return MATCHED_PASS;
    1e7c:	85 e5       	ldi	r24, 0x55	; 85
    1e7e:	8c 83       	std	Y+4, r24	; 0x04
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04


}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <Buzzer>:
void Buzzer(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62

	 Buzzer_Init(); // Initialize the buzzer pin
    1e98:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <Buzzer_Init>
	 Buzzer_On();
    1e9c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Buzzer_On>
	 //Turn on the buzzer
	 delaySec(60);
    1ea0:	8c e3       	ldi	r24, 0x3C	; 60
    1ea2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <delaySec>
	 Buzzer_Off();// Turn off the buzzer
    1ea6:	0e 94 74 06 	call	0xce8	; 0xce8 <Buzzer_Off>
}
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <delaySec>:
void delaySec(u8 sec)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	61 97       	sbiw	r28, 0x11	; 17
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	89 8b       	std	Y+17, r24	; 0x11
	for(int i =0; i <sec; i++)
    1ec6:	18 8a       	std	Y+16, r1	; 0x10
    1ec8:	1f 86       	std	Y+15, r1	; 0x0f
    1eca:	77 c0       	rjmp	.+238    	; 0x1fba <delaySec+0x10a>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	aa e7       	ldi	r26, 0x7A	; 122
    1ed2:	b4 e4       	ldi	r27, 0x44	; 68
    1ed4:	8b 87       	std	Y+11, r24	; 0x0b
    1ed6:	9c 87       	std	Y+12, r25	; 0x0c
    1ed8:	ad 87       	std	Y+13, r26	; 0x0d
    1eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f 83       	std	Y+7, r24	; 0x07
    1ef6:	98 87       	std	Y+8, r25	; 0x08
    1ef8:	a9 87       	std	Y+9, r26	; 0x09
    1efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <delaySec+0x6e>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <delaySec+0xec>
	else if (__tmp > 65535)
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <delaySec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <delaySec+0xce>
    1f60:	88 ec       	ldi	r24, 0xC8	; 200
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <delaySec+0xbc>
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <delaySec+0xb0>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <delaySec+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <delaySec+0xf8>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	98 89       	ldd	r25, Y+16	; 0x10
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	98 8b       	std	Y+16, r25	; 0x10
    1fb8:	8f 87       	std	Y+15, r24	; 0x0f
    1fba:	89 89       	ldd	r24, Y+17	; 0x11
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc2:	98 89       	ldd	r25, Y+16	; 0x10
    1fc4:	82 17       	cp	r24, r18
    1fc6:	93 07       	cpc	r25, r19
    1fc8:	0c f4       	brge	.+2      	; 0x1fcc <delaySec+0x11c>
    1fca:	80 cf       	rjmp	.-256    	; 0x1ecc <delaySec+0x1c>
		 {
	_delay_ms(1000); // Delay for 1 minute
		 }

}
    1fcc:	61 96       	adiw	r28, 0x11	; 17
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <TIMER0_Init>:
#include "stdio.h"


void (*TIMER0_pvCallBackFunc)(void) =NULL;

void TIMER0_Init(void){
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
	// wave generation : CTC mode
	SET_BIT(TCCR0 , TCCR0_WGM00);
    1fe6:	a3 e5       	ldi	r26, 0x53	; 83
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e3 e5       	ldi	r30, 0x53	; 83
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	80 64       	ori	r24, 0x40	; 64
    1ff2:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
    1ff4:	a3 e5       	ldi	r26, 0x53	; 83
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e3 e5       	ldi	r30, 0x53	; 83
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 60       	ori	r24, 0x08	; 8
    2000:	8c 93       	st	X, r24

	SET_BIT(TCCR0,TCCR0_COM01);
    2002:	a3 e5       	ldi	r26, 0x53	; 83
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e3 e5       	ldi	r30, 0x53	; 83
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 62       	ori	r24, 0x20	; 32
    200e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM00);
    2010:	a3 e5       	ldi	r26, 0x53	; 83
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e3 e5       	ldi	r30, 0x53	; 83
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8f 7e       	andi	r24, 0xEF	; 239
    201c:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
    201e:	af e5       	ldi	r26, 0x5F	; 95
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ef e5       	ldi	r30, 0x5F	; 95
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	8c 93       	st	X, r24
	//Enable PIE of Compare Match intrrupt
	SET_BIT(TIMSK , TIMSK_OCIE);
    202c:	a9 e5       	ldi	r26, 0x59	; 89
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e9 e5       	ldi	r30, 0x59	; 89
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	82 60       	ori	r24, 0x02	; 2
    2038:	8c 93       	st	X, r24
	//Set compare match value
	OCR0=50;
    203a:	ec e5       	ldi	r30, 0x5C	; 92
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	82 e3       	ldi	r24, 0x32	; 50
    2040:	80 83       	st	Z, r24

	// prescaler
	CLR_BIT(TCCR0 , TCCR0_CS00);
    2042:	a3 e5       	ldi	r26, 0x53	; 83
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e3 e5       	ldi	r30, 0x53	; 83
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8e 7f       	andi	r24, 0xFE	; 254
    204e:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS01);
    2050:	a3 e5       	ldi	r26, 0x53	; 83
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e3 e5       	ldi	r30, 0x53	; 83
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	82 60       	ori	r24, 0x02	; 2
    205c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS02);
    205e:	a3 e5       	ldi	r26, 0x53	; 83
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e3 e5       	ldi	r30, 0x53	; 83
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8b 7f       	andi	r24, 0xFB	; 251
    206a:	8c 93       	st	X, r24




}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <TIMER0_u8SetCallBack>:
u8   TIMER0_u8SetCallBack(void ( *Copy_pvCallBackFunc)(void)){
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <TIMER0_u8SetCallBack+0x6>
    2078:	0f 92       	push	r0
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	9b 83       	std	Y+3, r25	; 0x03
    2080:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatus_Local = OK;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL){
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	9b 81       	ldd	r25, Y+3	; 0x03
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	39 f0       	breq	.+14     	; 0x209c <TIMER0_u8SetCallBack+0x2a>
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	9b 81       	ldd	r25, Y+3	; 0x03
    2092:	90 93 71 00 	sts	0x0071, r25
    2096:	80 93 70 00 	sts	0x0070, r24
    209a:	01 c0       	rjmp	.+2      	; 0x209e <TIMER0_u8SetCallBack+0x2c>
	}
	else{
		u8ErrorStatus_Local = NULL;
    209c:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorStatus_Local;
    209e:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <__vector_10>:


/* Actual ISR */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	2f 93       	push	r18
    20b8:	3f 93       	push	r19
    20ba:	4f 93       	push	r20
    20bc:	5f 93       	push	r21
    20be:	6f 93       	push	r22
    20c0:	7f 93       	push	r23
    20c2:	8f 93       	push	r24
    20c4:	9f 93       	push	r25
    20c6:	af 93       	push	r26
    20c8:	bf 93       	push	r27
    20ca:	ef 93       	push	r30
    20cc:	ff 93       	push	r31
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL){
    20d6:	80 91 70 00 	lds	r24, 0x0070
    20da:	90 91 71 00 	lds	r25, 0x0071
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	29 f0       	breq	.+10     	; 0x20ec <__vector_10+0x40>
		TIMER0_pvCallBackFunc();
    20e2:	e0 91 70 00 	lds	r30, 0x0070
    20e6:	f0 91 71 00 	lds	r31, 0x0071
    20ea:	09 95       	icall
	}
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <__udivmodsi4>:
    2112:	a1 e2       	ldi	r26, 0x21	; 33
    2114:	1a 2e       	mov	r1, r26
    2116:	aa 1b       	sub	r26, r26
    2118:	bb 1b       	sub	r27, r27
    211a:	fd 01       	movw	r30, r26
    211c:	0d c0       	rjmp	.+26     	; 0x2138 <__udivmodsi4_ep>

0000211e <__udivmodsi4_loop>:
    211e:	aa 1f       	adc	r26, r26
    2120:	bb 1f       	adc	r27, r27
    2122:	ee 1f       	adc	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	a2 17       	cp	r26, r18
    2128:	b3 07       	cpc	r27, r19
    212a:	e4 07       	cpc	r30, r20
    212c:	f5 07       	cpc	r31, r21
    212e:	20 f0       	brcs	.+8      	; 0x2138 <__udivmodsi4_ep>
    2130:	a2 1b       	sub	r26, r18
    2132:	b3 0b       	sbc	r27, r19
    2134:	e4 0b       	sbc	r30, r20
    2136:	f5 0b       	sbc	r31, r21

00002138 <__udivmodsi4_ep>:
    2138:	66 1f       	adc	r22, r22
    213a:	77 1f       	adc	r23, r23
    213c:	88 1f       	adc	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	1a 94       	dec	r1
    2142:	69 f7       	brne	.-38     	; 0x211e <__udivmodsi4_loop>
    2144:	60 95       	com	r22
    2146:	70 95       	com	r23
    2148:	80 95       	com	r24
    214a:	90 95       	com	r25
    214c:	9b 01       	movw	r18, r22
    214e:	ac 01       	movw	r20, r24
    2150:	bd 01       	movw	r22, r26
    2152:	cf 01       	movw	r24, r30
    2154:	08 95       	ret

00002156 <__prologue_saves__>:
    2156:	2f 92       	push	r2
    2158:	3f 92       	push	r3
    215a:	4f 92       	push	r4
    215c:	5f 92       	push	r5
    215e:	6f 92       	push	r6
    2160:	7f 92       	push	r7
    2162:	8f 92       	push	r8
    2164:	9f 92       	push	r9
    2166:	af 92       	push	r10
    2168:	bf 92       	push	r11
    216a:	cf 92       	push	r12
    216c:	df 92       	push	r13
    216e:	ef 92       	push	r14
    2170:	ff 92       	push	r15
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	ca 1b       	sub	r28, r26
    2180:	db 0b       	sbc	r29, r27
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	09 94       	ijmp

0000218e <__epilogue_restores__>:
    218e:	2a 88       	ldd	r2, Y+18	; 0x12
    2190:	39 88       	ldd	r3, Y+17	; 0x11
    2192:	48 88       	ldd	r4, Y+16	; 0x10
    2194:	5f 84       	ldd	r5, Y+15	; 0x0f
    2196:	6e 84       	ldd	r6, Y+14	; 0x0e
    2198:	7d 84       	ldd	r7, Y+13	; 0x0d
    219a:	8c 84       	ldd	r8, Y+12	; 0x0c
    219c:	9b 84       	ldd	r9, Y+11	; 0x0b
    219e:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a0:	b9 84       	ldd	r11, Y+9	; 0x09
    21a2:	c8 84       	ldd	r12, Y+8	; 0x08
    21a4:	df 80       	ldd	r13, Y+7	; 0x07
    21a6:	ee 80       	ldd	r14, Y+6	; 0x06
    21a8:	fd 80       	ldd	r15, Y+5	; 0x05
    21aa:	0c 81       	ldd	r16, Y+4	; 0x04
    21ac:	1b 81       	ldd	r17, Y+3	; 0x03
    21ae:	aa 81       	ldd	r26, Y+2	; 0x02
    21b0:	b9 81       	ldd	r27, Y+1	; 0x01
    21b2:	ce 0f       	add	r28, r30
    21b4:	d1 1d       	adc	r29, r1
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	ed 01       	movw	r28, r26
    21c2:	08 95       	ret

000021c4 <_exit>:
    21c4:	f8 94       	cli

000021c6 <__stop_program>:
    21c6:	ff cf       	rjmp	.-2      	; 0x21c6 <__stop_program>
