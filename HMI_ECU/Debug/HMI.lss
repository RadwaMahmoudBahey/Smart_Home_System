
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000235c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  0000235c  000023f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000fc  008000fc  0000248c  2**0
                  ALLOC
  3 .stab         00002358  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000115c  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000094d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000098c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a08f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <main>
      8a:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ee       	ldi	r26, 0xE3	; 227
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ee       	ldi	r24, 0xE3	; 227
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void DIO_SetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_SetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_SetPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((u8PinIdCopy >= NUM_OF_PINS_PER_PORT) || (u8PortIdCopy >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <DIO_SetPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <DIO_SetPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_SetPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <DIO_SetPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(u8PortIdCopy)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_SetPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <DIO_SetPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <DIO_SetPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <DIO_SetPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <DIO_SetPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <DIO_SetPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <DIO_SetPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <DIO_SetPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <DIO_SetPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <DIO_SetPinDirection+0x1c6>
		{
		case DIO_PORTA:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <DIO_SetPinDirection+0x96>
			{
				SET_BIT(DDRA,u8PinIdCopy);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_SetPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_SetPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,u8PinIdCopy);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_SetPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_SetPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			break;
		case DIO_PORTB:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <DIO_SetPinDirection+0xee>
			{
				SET_BIT(DDRB,u8PinIdCopy);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_SetPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_SetPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,u8PinIdCopy);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_SetPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_SetPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			break;
		case DIO_PORTC:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <DIO_SetPinDirection+0x146>
			{
				SET_BIT(DDRC,u8PinIdCopy);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_SetPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_SetPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,u8PinIdCopy);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_SetPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_SetPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			break;
		case DIO_PORTD:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <DIO_SetPinDirection+0x19e>
			{
				SET_BIT(DDRD,u8PinIdCopy);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_SetPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_SetPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <DIO_SetPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,u8PinIdCopy);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_SetPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_SetPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <DIO_SetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy, u8 u8value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <DIO_SetPinValue+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <DIO_SetPinValue+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((u8PinIdCopy >= NUM_OF_PINS_PER_PORT) || (u8PortIdCopy >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <DIO_SetPinValue+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <DIO_SetPinValue+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <DIO_SetPinValue+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <DIO_SetPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(u8PortIdCopy)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_SetPinValue+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <DIO_SetPinValue+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <DIO_SetPinValue+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <DIO_SetPinValue+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <DIO_SetPinValue+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <DIO_SetPinValue+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <DIO_SetPinValue+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <DIO_SetPinValue+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <DIO_SetPinValue+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <DIO_SetPinValue+0x1c6>
		{
		case DIO_PORTA:
			if(u8value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <DIO_SetPinValue+0x96>
			{
				SET_BIT(PORTA,u8PinIdCopy);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_SetPinValue+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_SetPinValue+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,u8PinIdCopy);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_SetPinValue+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_SetPinValue+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			break;
		case DIO_PORTB:
			if(u8value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <DIO_SetPinValue+0xee>
			{
				SET_BIT(PORTB,u8PinIdCopy);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_SetPinValue+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_SetPinValue+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,u8PinIdCopy);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_SetPinValue+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_SetPinValue+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			break;
		case DIO_PORTC:
			if(u8value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <DIO_SetPinValue+0x146>
			{
				SET_BIT(PORTC,u8PinIdCopy);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_SetPinValue+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_SetPinValue+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,u8PinIdCopy);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_SetPinValue+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_SetPinValue+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			break;
		case DIO_PORTD:
			if(u8value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <DIO_SetPinValue+0x19e>
			{
				SET_BIT(PORTD,u8PinIdCopy);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_SetPinValue+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_SetPinValue+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <DIO_SetPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,u8PinIdCopy);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_SetPinValue+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_SetPinValue+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <DIO_GetPinValue>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 DIO_GetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <DIO_GetPinValue+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <DIO_GetPinValue+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((u8PinIdCopy >= NUM_OF_PINS_PER_PORT) || (u8PortIdCopy >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <DIO_GetPinValue+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <DIO_GetPinValue+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <DIO_GetPinValue+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <DIO_GetPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(u8PortIdCopy)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <DIO_GetPinValue+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <DIO_GetPinValue+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <DIO_GetPinValue+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <DIO_GetPinValue+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <DIO_GetPinValue+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <DIO_GetPinValue+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <DIO_GetPinValue+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <DIO_GetPinValue+0x124>
		{
		case DIO_PORTA:
			if(BIT_IS_SET(PINA,u8PinIdCopy))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_GetPinValue+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_GetPinValue+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <DIO_GetPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <DIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <DIO_GetPinValue+0x124>
			}
			break;
		case DIO_PORTB:
			if(BIT_IS_SET(PINB,u8PinIdCopy))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_GetPinValue+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_GetPinValue+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <DIO_GetPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <DIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <DIO_GetPinValue+0x124>
			}
			break;
		case DIO_PORTC:
			if(BIT_IS_SET(PINC,u8PinIdCopy))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_GetPinValue+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_GetPinValue+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <DIO_GetPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <DIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <DIO_GetPinValue+0x124>
			}
			break;
		case DIO_PORTD:
			if(BIT_IS_SET(PIND,u8PinIdCopy))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_GetPinValue+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_GetPinValue+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <DIO_GetPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <DIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_SetPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_SetPortDirection(u8 u8PortIdCopy, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_SetPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_SetPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(u8PortIdCopy >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <DIO_SetPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(u8PortIdCopy)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <DIO_SetPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <DIO_SetPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <DIO_SetPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <DIO_SetPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <DIO_SetPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <DIO_SetPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <DIO_SetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <DIO_SetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <DIO_SetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <DIO_SetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <DIO_SetPortValue>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_SetPortValue(u8 u8PortIdCopy, u8 u8value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_SetPortValue+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <DIO_SetPortValue+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(u8PortIdCopy >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <DIO_SetPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(u8PortIdCopy)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_SetPortValue+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_SetPortValue+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_SetPortValue+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <DIO_SetPortValue+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <DIO_SetPortValue+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <DIO_SetPortValue+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <DIO_SetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA = u8value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <DIO_SetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB = u8value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <DIO_SetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC = u8value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <DIO_SetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD = u8value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_readPort(u8 u8PortIdCopy)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02


	u8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(u8PortIdCopy >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(u8PortIdCopy)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case DIO_PORTA:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case DIO_PORTB:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case DIO_PORTC:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case DIO_PORTD:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <KEYPAD_voidInit>:
/*
 * Description :
 * Initialize the Keypad Driver (it's pins and ports)
 */
void KEYPAD_voidInit(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	/*Set the Raw port as input with PORT=1 to activate the internal pull up */
	DIO_SetPortDirection(KEYPAD_ROW_PORT,PORT_INPUT);
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_SetPortDirection>
	DIO_SetPortValue(KEYPAD_ROW_PORT,0x0F);
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	6f e0       	ldi	r22, 0x0F	; 15
    11d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_SetPortValue>
	/*Set the COL port as output with Initial value =LOGIC HIGH*/
    DIO_SetPortDirection(KEYPAD_COL_PORT,PORT_OUTPUT);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	6f ef       	ldi	r22, 0xFF	; 255
    11de:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_SetPortDirection>
    DIO_SetPortValue(KEYPAD_COL_PORT,0xFF);
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	6f ef       	ldi	r22, 0xFF	; 255
    11e6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_SetPortValue>
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <KEYPAD_u8GetPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
u8 KEYPAD_u8GetPressedKey(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	af 97       	sbiw	r28, 0x2f	; 47
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
	/*Define the row and col variables that will check which button pressed*/
	u8 u8RowLocal=0,u8ColLocal=0;
    1204:	19 8a       	std	Y+17, r1	; 0x11
    1206:	18 8a       	std	Y+16, r1	; 0x10
	/*Define the row and col arrays that will include the keypad pins */
	u8 KPD_u8RwoPinArr[KEYPAD_NUM_ROWS] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    1208:	1a 8a       	std	Y+18, r1	; 0x12
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	8b 8b       	std	Y+19, r24	; 0x13
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	8c 8b       	std	Y+20, r24	; 0x14
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	8d 8b       	std	Y+21, r24	; 0x15
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    1216:	1e 8a       	std	Y+22, r1	; 0x16
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	8f 8b       	std	Y+23, r24	; 0x17
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	88 8f       	std	Y+24, r24	; 0x18
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	89 8f       	std	Y+25, r24	; 0x19
	for(u8ColLocal=0;u8ColLocal<KEYPAD_NUM_COLS;u8ColLocal++)
    1224:	18 8a       	std	Y+16, r1	; 0x10
    1226:	f7 c0       	rjmp	.+494    	; 0x1416 <KEYPAD_u8GetPressedKey+0x226>
	{
		/*To activate one column at a time -> col_pin =0*/
		DIO_SetPinValue(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_LOW);
    1228:	88 89       	ldd	r24, Y+16	; 0x10
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	ce 01       	movw	r24, r28
    1230:	46 96       	adiw	r24, 0x16	; 22
    1232:	fc 01       	movw	r30, r24
    1234:	e2 0f       	add	r30, r18
    1236:	f3 1f       	adc	r31, r19
    1238:	90 81       	ld	r25, Z
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	69 2f       	mov	r22, r25
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
		for(u8RowLocal=0;u8RowLocal<KEYPAD_NUM_ROWS;u8RowLocal++)
    1244:	19 8a       	std	Y+17, r1	; 0x11
    1246:	d2 c0       	rjmp	.+420    	; 0x13ec <KEYPAD_u8GetPressedKey+0x1fc>
		{
			u8 u8Value=DIO_GetPinValue(KEYPAD_ROW_PORT,KPD_u8RwoPinArr[u8RowLocal]);
    1248:	89 89       	ldd	r24, Y+17	; 0x11
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	ce 01       	movw	r24, r28
    1250:	42 96       	adiw	r24, 0x12	; 18
    1252:	fc 01       	movw	r30, r24
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	90 81       	ld	r25, Z
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	69 2f       	mov	r22, r25
    125e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_GetPinValue>
    1262:	8f 87       	std	Y+15, r24	; 0x0f
			if (u8Value == KEYPAD_BUTTON_PRESSED)
    1264:	8f 85       	ldd	r24, Y+15	; 0x0f
    1266:	88 23       	and	r24, r24
    1268:	09 f0       	breq	.+2      	; 0x126c <KEYPAD_u8GetPressedKey+0x7c>
    126a:	bd c0       	rjmp	.+378    	; 0x13e6 <KEYPAD_u8GetPressedKey+0x1f6>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 ef       	ldi	r26, 0xF0	; 240
    1272:	b1 e4       	ldi	r27, 0x41	; 65
    1274:	8b 87       	std	Y+11, r24	; 0x0b
    1276:	9c 87       	std	Y+12, r25	; 0x0c
    1278:	ad 87       	std	Y+13, r26	; 0x0d
    127a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a ef       	ldi	r20, 0xFA	; 250
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8f 83       	std	Y+7, r24	; 0x07
    1296:	98 87       	std	Y+8, r25	; 0x08
    1298:	a9 87       	std	Y+9, r26	; 0x09
    129a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <KEYPAD_u8GetPressedKey+0xce>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <KEYPAD_u8GetPressedKey+0x14c>
	else if (__tmp > 65535)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <KEYPAD_u8GetPressedKey+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <KEYPAD_u8GetPressedKey+0x12e>
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <KEYPAD_u8GetPressedKey+0x11c>
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <KEYPAD_u8GetPressedKey+0x110>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <KEYPAD_u8GetPressedKey+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <KEYPAD_u8GetPressedKey+0x158>
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
			{
				/*delay and second check for switch debouncing*/
				_delay_ms(30);
				if (u8Value == KEYPAD_BUTTON_PRESSED)
    1350:	8f 85       	ldd	r24, Y+15	; 0x0f
    1352:	88 23       	and	r24, r24
    1354:	09 f0       	breq	.+2      	; 0x1358 <KEYPAD_u8GetPressedKey+0x168>
    1356:	47 c0       	rjmp	.+142    	; 0x13e6 <KEYPAD_u8GetPressedKey+0x1f6>
    1358:	0e c0       	rjmp	.+28     	; 0x1376 <KEYPAD_u8GetPressedKey+0x186>
				{
					while(u8Value == KEYPAD_BUTTON_PRESSED)
					{
						u8Value=DIO_GetPinValue(KEYPAD_ROW_PORT,KPD_u8RwoPinArr[u8RowLocal]);
    135a:	89 89       	ldd	r24, Y+17	; 0x11
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	ce 01       	movw	r24, r28
    1362:	42 96       	adiw	r24, 0x12	; 18
    1364:	fc 01       	movw	r30, r24
    1366:	e2 0f       	add	r30, r18
    1368:	f3 1f       	adc	r31, r19
    136a:	90 81       	ld	r25, Z
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	69 2f       	mov	r22, r25
    1370:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_GetPinValue>
    1374:	8f 87       	std	Y+15, r24	; 0x0f
			{
				/*delay and second check for switch debouncing*/
				_delay_ms(30);
				if (u8Value == KEYPAD_BUTTON_PRESSED)
				{
					while(u8Value == KEYPAD_BUTTON_PRESSED)
    1376:	8f 85       	ldd	r24, Y+15	; 0x0f
    1378:	88 23       	and	r24, r24
    137a:	79 f3       	breq	.-34     	; 0x135a <KEYPAD_u8GetPressedKey+0x16a>
					{
						u8Value=DIO_GetPinValue(KEYPAD_ROW_PORT,KPD_u8RwoPinArr[u8RowLocal]);
					}
					u8 KPD_u8Value[KEYPAD_NUM_ROWS][KEYPAD_NUM_COLS]= KPD_VALUES;
    137c:	ce 01       	movw	r24, r28
    137e:	4a 96       	adiw	r24, 0x1a	; 26
    1380:	9c a7       	std	Y+44, r25	; 0x2c
    1382:	8b a7       	std	Y+43, r24	; 0x2b
    1384:	eb ee       	ldi	r30, 0xEB	; 235
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	fe a7       	std	Y+46, r31	; 0x2e
    138a:	ed a7       	std	Y+45, r30	; 0x2d
    138c:	f0 e1       	ldi	r31, 0x10	; 16
    138e:	ff a7       	std	Y+47, r31	; 0x2f
    1390:	ed a5       	ldd	r30, Y+45	; 0x2d
    1392:	fe a5       	ldd	r31, Y+46	; 0x2e
    1394:	00 80       	ld	r0, Z
    1396:	8d a5       	ldd	r24, Y+45	; 0x2d
    1398:	9e a5       	ldd	r25, Y+46	; 0x2e
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	9e a7       	std	Y+46, r25	; 0x2e
    139e:	8d a7       	std	Y+45, r24	; 0x2d
    13a0:	eb a5       	ldd	r30, Y+43	; 0x2b
    13a2:	fc a5       	ldd	r31, Y+44	; 0x2c
    13a4:	00 82       	st	Z, r0
    13a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	9c a7       	std	Y+44, r25	; 0x2c
    13ae:	8b a7       	std	Y+43, r24	; 0x2b
    13b0:	9f a5       	ldd	r25, Y+47	; 0x2f
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	9f a7       	std	Y+47, r25	; 0x2f
    13b6:	ef a5       	ldd	r30, Y+47	; 0x2f
    13b8:	ee 23       	and	r30, r30
    13ba:	51 f7       	brne	.-44     	; 0x1390 <KEYPAD_u8GetPressedKey+0x1a0>
					return KPD_u8Value[u8RowLocal][u8ColLocal];
    13bc:	89 89       	ldd	r24, Y+17	; 0x11
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	88 89       	ldd	r24, Y+16	; 0x10
    13c4:	48 2f       	mov	r20, r24
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
    13d8:	84 0f       	add	r24, r20
    13da:	95 1f       	adc	r25, r21
    13dc:	fc 01       	movw	r30, r24
    13de:	79 96       	adiw	r30, 0x19	; 25
    13e0:	80 81       	ld	r24, Z
    13e2:	8a a7       	std	Y+42, r24	; 0x2a
    13e4:	1e c0       	rjmp	.+60     	; 0x1422 <KEYPAD_u8GetPressedKey+0x232>
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	for(u8ColLocal=0;u8ColLocal<KEYPAD_NUM_COLS;u8ColLocal++)
	{
		/*To activate one column at a time -> col_pin =0*/
		DIO_SetPinValue(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_LOW);
		for(u8RowLocal=0;u8RowLocal<KEYPAD_NUM_ROWS;u8RowLocal++)
    13e6:	89 89       	ldd	r24, Y+17	; 0x11
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	89 8b       	std	Y+17, r24	; 0x11
    13ec:	89 89       	ldd	r24, Y+17	; 0x11
    13ee:	84 30       	cpi	r24, 0x04	; 4
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <KEYPAD_u8GetPressedKey+0x204>
    13f2:	2a cf       	rjmp	.-428    	; 0x1248 <KEYPAD_u8GetPressedKey+0x58>
					return KPD_u8Value[u8RowLocal][u8ColLocal];
				}
			}
		}
		/*there is no button pressed*/
		DIO_SetPinValue(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_HIGH);
    13f4:	88 89       	ldd	r24, Y+16	; 0x10
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	ce 01       	movw	r24, r28
    13fc:	46 96       	adiw	r24, 0x16	; 22
    13fe:	fc 01       	movw	r30, r24
    1400:	e2 0f       	add	r30, r18
    1402:	f3 1f       	adc	r31, r19
    1404:	90 81       	ld	r25, Z
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	69 2f       	mov	r22, r25
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
	/*Define the row and col variables that will check which button pressed*/
	u8 u8RowLocal=0,u8ColLocal=0;
	/*Define the row and col arrays that will include the keypad pins */
	u8 KPD_u8RwoPinArr[KEYPAD_NUM_ROWS] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	for(u8ColLocal=0;u8ColLocal<KEYPAD_NUM_COLS;u8ColLocal++)
    1410:	88 89       	ldd	r24, Y+16	; 0x10
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	88 8b       	std	Y+16, r24	; 0x10
    1416:	88 89       	ldd	r24, Y+16	; 0x10
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	08 f4       	brcc	.+2      	; 0x141e <KEYPAD_u8GetPressedKey+0x22e>
    141c:	05 cf       	rjmp	.-502    	; 0x1228 <KEYPAD_u8GetPressedKey+0x38>
			}
		}
		/*there is no button pressed*/
		DIO_SetPinValue(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_HIGH);
	}
	return KEYPAD_BUTTON_RELEASED;
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	9a a7       	std	Y+42, r25	; 0x2a
    1422:	8a a5       	ldd	r24, Y+42	; 0x2a
}
    1424:	af 96       	adiw	r28, 0x2f	; 47
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <itoa>:
#include "std_types.h"
#include "common_macros.h"
#include "LCD.h"


u8* itoa(s32 num, u8* str, s32 base) {
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	a4 97       	sbiw	r28, 0x24	; 36
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	6e 8b       	std	Y+22, r22	; 0x16
    1450:	7f 8b       	std	Y+23, r23	; 0x17
    1452:	88 8f       	std	Y+24, r24	; 0x18
    1454:	99 8f       	std	Y+25, r25	; 0x19
    1456:	5b 8f       	std	Y+27, r21	; 0x1b
    1458:	4a 8f       	std	Y+26, r20	; 0x1a
    145a:	0c 8f       	std	Y+28, r16	; 0x1c
    145c:	1d 8f       	std	Y+29, r17	; 0x1d
    145e:	2e 8f       	std	Y+30, r18	; 0x1e
    1460:	3f 8f       	std	Y+31, r19	; 0x1f
	s32 i = 0;
    1462:	1a 8a       	std	Y+18, r1	; 0x12
    1464:	1b 8a       	std	Y+19, r1	; 0x13
    1466:	1c 8a       	std	Y+20, r1	; 0x14
    1468:	1d 8a       	std	Y+21, r1	; 0x15
	s32 isNegative = 0;
    146a:	1e 86       	std	Y+14, r1	; 0x0e
    146c:	1f 86       	std	Y+15, r1	; 0x0f
    146e:	18 8a       	std	Y+16, r1	; 0x10
    1470:	19 8a       	std	Y+17, r1	; 0x11

	// Handle 0 explicitly
	if (num == 0) {
    1472:	8e 89       	ldd	r24, Y+22	; 0x16
    1474:	9f 89       	ldd	r25, Y+23	; 0x17
    1476:	a8 8d       	ldd	r26, Y+24	; 0x18
    1478:	b9 8d       	ldd	r27, Y+25	; 0x19
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	a1 05       	cpc	r26, r1
    147e:	b1 05       	cpc	r27, r1
    1480:	09 f5       	brne	.+66     	; 0x14c4 <itoa+0x8e>
		str[i++] = '0';
    1482:	2a 89       	ldd	r18, Y+18	; 0x12
    1484:	3b 89       	ldd	r19, Y+19	; 0x13
    1486:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1488:	9b 8d       	ldd	r25, Y+27	; 0x1b
    148a:	fc 01       	movw	r30, r24
    148c:	e2 0f       	add	r30, r18
    148e:	f3 1f       	adc	r31, r19
    1490:	80 e3       	ldi	r24, 0x30	; 48
    1492:	80 83       	st	Z, r24
    1494:	8a 89       	ldd	r24, Y+18	; 0x12
    1496:	9b 89       	ldd	r25, Y+19	; 0x13
    1498:	ac 89       	ldd	r26, Y+20	; 0x14
    149a:	bd 89       	ldd	r27, Y+21	; 0x15
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	a1 1d       	adc	r26, r1
    14a0:	b1 1d       	adc	r27, r1
    14a2:	8a 8b       	std	Y+18, r24	; 0x12
    14a4:	9b 8b       	std	Y+19, r25	; 0x13
    14a6:	ac 8b       	std	Y+20, r26	; 0x14
    14a8:	bd 8b       	std	Y+21, r27	; 0x15
		str[i] = '\0';
    14aa:	2a 89       	ldd	r18, Y+18	; 0x12
    14ac:	3b 89       	ldd	r19, Y+19	; 0x13
    14ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14b2:	fc 01       	movw	r30, r24
    14b4:	e2 0f       	add	r30, r18
    14b6:	f3 1f       	adc	r31, r19
    14b8:	10 82       	st	Z, r1
		return str;
    14ba:	4a 8d       	ldd	r20, Y+26	; 0x1a
    14bc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    14be:	5c a3       	std	Y+36, r21	; 0x24
    14c0:	4b a3       	std	Y+35, r20	; 0x23
    14c2:	fe c0       	rjmp	.+508    	; 0x16c0 <itoa+0x28a>
	}

	// Handle negative numbers
	if (num < 0 && base == 10) {
    14c4:	8e 89       	ldd	r24, Y+22	; 0x16
    14c6:	9f 89       	ldd	r25, Y+23	; 0x17
    14c8:	a8 8d       	ldd	r26, Y+24	; 0x18
    14ca:	b9 8d       	ldd	r27, Y+25	; 0x19
    14cc:	bb 23       	and	r27, r27
    14ce:	0c f0       	brlt	.+2      	; 0x14d2 <itoa+0x9c>
    14d0:	70 c0       	rjmp	.+224    	; 0x15b2 <itoa+0x17c>
    14d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14d6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    14d8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    14da:	8a 30       	cpi	r24, 0x0A	; 10
    14dc:	91 05       	cpc	r25, r1
    14de:	a1 05       	cpc	r26, r1
    14e0:	b1 05       	cpc	r27, r1
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <itoa+0xb0>
    14e4:	66 c0       	rjmp	.+204    	; 0x15b2 <itoa+0x17c>
		isNegative = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e0       	ldi	r26, 0x00	; 0
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	8e 87       	std	Y+14, r24	; 0x0e
    14f0:	9f 87       	std	Y+15, r25	; 0x0f
    14f2:	a8 8b       	std	Y+16, r26	; 0x10
    14f4:	b9 8b       	std	Y+17, r27	; 0x11
		num = -num;
    14f6:	8e 89       	ldd	r24, Y+22	; 0x16
    14f8:	9f 89       	ldd	r25, Y+23	; 0x17
    14fa:	a8 8d       	ldd	r26, Y+24	; 0x18
    14fc:	b9 8d       	ldd	r27, Y+25	; 0x19
    14fe:	b0 95       	com	r27
    1500:	a0 95       	com	r26
    1502:	90 95       	com	r25
    1504:	81 95       	neg	r24
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	af 4f       	sbci	r26, 0xFF	; 255
    150a:	bf 4f       	sbci	r27, 0xFF	; 255
    150c:	8e 8b       	std	Y+22, r24	; 0x16
    150e:	9f 8b       	std	Y+23, r25	; 0x17
    1510:	a8 8f       	std	Y+24, r26	; 0x18
    1512:	b9 8f       	std	Y+25, r27	; 0x19
    1514:	4e c0       	rjmp	.+156    	; 0x15b2 <itoa+0x17c>
	}

	// Convert the number to string in reverse order
	while (num != 0) {
		s32 rem = num % base;
    1516:	8e 89       	ldd	r24, Y+22	; 0x16
    1518:	9f 89       	ldd	r25, Y+23	; 0x17
    151a:	a8 8d       	ldd	r26, Y+24	; 0x18
    151c:	b9 8d       	ldd	r27, Y+25	; 0x19
    151e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1520:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1522:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1524:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 38 11 	call	0x2270	; 0x2270 <__divmodsi4>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8a 83       	std	Y+2, r24	; 0x02
    1534:	9b 83       	std	Y+3, r25	; 0x03
    1536:	ac 83       	std	Y+4, r26	; 0x04
    1538:	bd 83       	std	Y+5, r27	; 0x05
		str[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
    153a:	2a 89       	ldd	r18, Y+18	; 0x12
    153c:	3b 89       	ldd	r19, Y+19	; 0x13
    153e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1540:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1542:	fc 01       	movw	r30, r24
    1544:	e2 0f       	add	r30, r18
    1546:	f3 1f       	adc	r31, r19
    1548:	fa a3       	std	Y+34, r31	; 0x22
    154a:	e9 a3       	std	Y+33, r30	; 0x21
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	ac 81       	ldd	r26, Y+4	; 0x04
    1552:	bd 81       	ldd	r27, Y+5	; 0x05
    1554:	8a 30       	cpi	r24, 0x0A	; 10
    1556:	91 05       	cpc	r25, r1
    1558:	a1 05       	cpc	r26, r1
    155a:	b1 05       	cpc	r27, r1
    155c:	2c f0       	brlt	.+10     	; 0x1568 <itoa+0x132>
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	f8 2f       	mov	r31, r24
    1562:	f9 5c       	subi	r31, 0xC9	; 201
    1564:	f8 a3       	std	Y+32, r31	; 0x20
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <itoa+0x13a>
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	48 2f       	mov	r20, r24
    156c:	40 5d       	subi	r20, 0xD0	; 208
    156e:	48 a3       	std	Y+32, r20	; 0x20
    1570:	48 a1       	ldd	r20, Y+32	; 0x20
    1572:	e9 a1       	ldd	r30, Y+33	; 0x21
    1574:	fa a1       	ldd	r31, Y+34	; 0x22
    1576:	40 83       	st	Z, r20
    1578:	8a 89       	ldd	r24, Y+18	; 0x12
    157a:	9b 89       	ldd	r25, Y+19	; 0x13
    157c:	ac 89       	ldd	r26, Y+20	; 0x14
    157e:	bd 89       	ldd	r27, Y+21	; 0x15
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	a1 1d       	adc	r26, r1
    1584:	b1 1d       	adc	r27, r1
    1586:	8a 8b       	std	Y+18, r24	; 0x12
    1588:	9b 8b       	std	Y+19, r25	; 0x13
    158a:	ac 8b       	std	Y+20, r26	; 0x14
    158c:	bd 8b       	std	Y+21, r27	; 0x15
		num = num / base;
    158e:	8e 89       	ldd	r24, Y+22	; 0x16
    1590:	9f 89       	ldd	r25, Y+23	; 0x17
    1592:	a8 8d       	ldd	r26, Y+24	; 0x18
    1594:	b9 8d       	ldd	r27, Y+25	; 0x19
    1596:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1598:	3d 8d       	ldd	r19, Y+29	; 0x1d
    159a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    159c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 38 11 	call	0x2270	; 0x2270 <__divmodsi4>
    15a6:	da 01       	movw	r26, r20
    15a8:	c9 01       	movw	r24, r18
    15aa:	8e 8b       	std	Y+22, r24	; 0x16
    15ac:	9f 8b       	std	Y+23, r25	; 0x17
    15ae:	a8 8f       	std	Y+24, r26	; 0x18
    15b0:	b9 8f       	std	Y+25, r27	; 0x19
		isNegative = 1;
		num = -num;
	}

	// Convert the number to string in reverse order
	while (num != 0) {
    15b2:	8e 89       	ldd	r24, Y+22	; 0x16
    15b4:	9f 89       	ldd	r25, Y+23	; 0x17
    15b6:	a8 8d       	ldd	r26, Y+24	; 0x18
    15b8:	b9 8d       	ldd	r27, Y+25	; 0x19
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	a1 05       	cpc	r26, r1
    15be:	b1 05       	cpc	r27, r1
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <itoa+0x18e>
    15c2:	a9 cf       	rjmp	.-174    	; 0x1516 <itoa+0xe0>
		str[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
		num = num / base;
	}

	// If the number is negative, append '-'
	if (isNegative)
    15c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c8:	a8 89       	ldd	r26, Y+16	; 0x10
    15ca:	b9 89       	ldd	r27, Y+17	; 0x11
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	a1 05       	cpc	r26, r1
    15d0:	b1 05       	cpc	r27, r1
    15d2:	a1 f0       	breq	.+40     	; 0x15fc <itoa+0x1c6>
	str[i++] = '-';
    15d4:	2a 89       	ldd	r18, Y+18	; 0x12
    15d6:	3b 89       	ldd	r19, Y+19	; 0x13
    15d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15dc:	fc 01       	movw	r30, r24
    15de:	e2 0f       	add	r30, r18
    15e0:	f3 1f       	adc	r31, r19
    15e2:	8d e2       	ldi	r24, 0x2D	; 45
    15e4:	80 83       	st	Z, r24
    15e6:	8a 89       	ldd	r24, Y+18	; 0x12
    15e8:	9b 89       	ldd	r25, Y+19	; 0x13
    15ea:	ac 89       	ldd	r26, Y+20	; 0x14
    15ec:	bd 89       	ldd	r27, Y+21	; 0x15
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	a1 1d       	adc	r26, r1
    15f2:	b1 1d       	adc	r27, r1
    15f4:	8a 8b       	std	Y+18, r24	; 0x12
    15f6:	9b 8b       	std	Y+19, r25	; 0x13
    15f8:	ac 8b       	std	Y+20, r26	; 0x14
    15fa:	bd 8b       	std	Y+21, r27	; 0x15

	// Append the null terminator
	str[i] = '\0';
    15fc:	2a 89       	ldd	r18, Y+18	; 0x12
    15fe:	3b 89       	ldd	r19, Y+19	; 0x13
    1600:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1602:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1604:	fc 01       	movw	r30, r24
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	10 82       	st	Z, r1

	// Reverse the string
	s32 start = 0;
    160c:	1a 86       	std	Y+10, r1	; 0x0a
    160e:	1b 86       	std	Y+11, r1	; 0x0b
    1610:	1c 86       	std	Y+12, r1	; 0x0c
    1612:	1d 86       	std	Y+13, r1	; 0x0d
	s32 end = i - 1;
    1614:	8a 89       	ldd	r24, Y+18	; 0x12
    1616:	9b 89       	ldd	r25, Y+19	; 0x13
    1618:	ac 89       	ldd	r26, Y+20	; 0x14
    161a:	bd 89       	ldd	r27, Y+21	; 0x15
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	a1 09       	sbc	r26, r1
    1620:	b1 09       	sbc	r27, r1
    1622:	8e 83       	std	Y+6, r24	; 0x06
    1624:	9f 83       	std	Y+7, r25	; 0x07
    1626:	a8 87       	std	Y+8, r26	; 0x08
    1628:	b9 87       	std	Y+9, r27	; 0x09
    162a:	38 c0       	rjmp	.+112    	; 0x169c <itoa+0x266>
	while (start < end) {
		s8 temp = str[start];
    162c:	2a 85       	ldd	r18, Y+10	; 0x0a
    162e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1630:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1632:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1634:	fc 01       	movw	r30, r24
    1636:	e2 0f       	add	r30, r18
    1638:	f3 1f       	adc	r31, r19
    163a:	80 81       	ld	r24, Z
    163c:	89 83       	std	Y+1, r24	; 0x01
		str[start] = str[end];
    163e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1640:	3b 85       	ldd	r19, Y+11	; 0x0b
    1642:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1644:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1646:	dc 01       	movw	r26, r24
    1648:	a2 0f       	add	r26, r18
    164a:	b3 1f       	adc	r27, r19
    164c:	2e 81       	ldd	r18, Y+6	; 0x06
    164e:	3f 81       	ldd	r19, Y+7	; 0x07
    1650:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1652:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1654:	fc 01       	movw	r30, r24
    1656:	e2 0f       	add	r30, r18
    1658:	f3 1f       	adc	r31, r19
    165a:	80 81       	ld	r24, Z
    165c:	8c 93       	st	X, r24
		str[end] = temp;
    165e:	2e 81       	ldd	r18, Y+6	; 0x06
    1660:	3f 81       	ldd	r19, Y+7	; 0x07
    1662:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1664:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1666:	fc 01       	movw	r30, r24
    1668:	e2 0f       	add	r30, r18
    166a:	f3 1f       	adc	r31, r19
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	80 83       	st	Z, r24
		start++;
    1670:	8a 85       	ldd	r24, Y+10	; 0x0a
    1672:	9b 85       	ldd	r25, Y+11	; 0x0b
    1674:	ac 85       	ldd	r26, Y+12	; 0x0c
    1676:	bd 85       	ldd	r27, Y+13	; 0x0d
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	a1 1d       	adc	r26, r1
    167c:	b1 1d       	adc	r27, r1
    167e:	8a 87       	std	Y+10, r24	; 0x0a
    1680:	9b 87       	std	Y+11, r25	; 0x0b
    1682:	ac 87       	std	Y+12, r26	; 0x0c
    1684:	bd 87       	std	Y+13, r27	; 0x0d
		end--;
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	9f 81       	ldd	r25, Y+7	; 0x07
    168a:	a8 85       	ldd	r26, Y+8	; 0x08
    168c:	b9 85       	ldd	r27, Y+9	; 0x09
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	a1 09       	sbc	r26, r1
    1692:	b1 09       	sbc	r27, r1
    1694:	8e 83       	std	Y+6, r24	; 0x06
    1696:	9f 83       	std	Y+7, r25	; 0x07
    1698:	a8 87       	std	Y+8, r26	; 0x08
    169a:	b9 87       	std	Y+9, r27	; 0x09
	str[i] = '\0';

	// Reverse the string
	s32 start = 0;
	s32 end = i - 1;
	while (start < end) {
    169c:	2a 85       	ldd	r18, Y+10	; 0x0a
    169e:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a0:	4c 85       	ldd	r20, Y+12	; 0x0c
    16a2:	5d 85       	ldd	r21, Y+13	; 0x0d
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	9f 81       	ldd	r25, Y+7	; 0x07
    16a8:	a8 85       	ldd	r26, Y+8	; 0x08
    16aa:	b9 85       	ldd	r27, Y+9	; 0x09
    16ac:	28 17       	cp	r18, r24
    16ae:	39 07       	cpc	r19, r25
    16b0:	4a 07       	cpc	r20, r26
    16b2:	5b 07       	cpc	r21, r27
    16b4:	0c f4       	brge	.+2      	; 0x16b8 <itoa+0x282>
    16b6:	ba cf       	rjmp	.-140    	; 0x162c <itoa+0x1f6>
		str[end] = temp;
		start++;
		end--;
	}

	return str;
    16b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16bc:	9c a3       	std	Y+36, r25	; 0x24
    16be:	8b a3       	std	Y+35, r24	; 0x23
    16c0:	8b a1       	ldd	r24, Y+35	; 0x23
    16c2:	9c a1       	ldd	r25, Y+36	; 0x24
}
    16c4:	a4 96       	adiw	r28, 0x24	; 36
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <LCD_voidInit>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_voidInit(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	2e 97       	sbiw	r28, 0x0e	; 14
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
	 *delay to wait the VDD rises
	 *Turn on 2 lines_8 bits mode
	 *Turn off cursor
	 *Clear command
	*/
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,PIN_OUTPUT);
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,PIN_OUTPUT);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	63 e0       	ldi	r22, 0x03	; 3
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,PIN_OUTPUT);
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	64 e0       	ldi	r22, 0x04	; 4
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
	DIO_SetPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	6f ef       	ldi	r22, 0xFF	; 255
    1710:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_SetPortDirection>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e2       	ldi	r26, 0x20	; 32
    171a:	b2 e4       	ldi	r27, 0x42	; 66
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	98 87       	std	Y+8, r25	; 0x08
    1740:	a9 87       	std	Y+9, r26	; 0x09
    1742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_voidInit+0x8c>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_voidInit+0xec>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_voidInit+0xda>
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_voidInit+0xce>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_voidInit+0x116>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	LCD_voidSendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17f8:	88 e3       	ldi	r24, 0x38	; 56
    17fa:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CURSOR_OFF);
    17fe:	8c e0       	ldi	r24, 0x0C	; 12
    1800:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_voidSendCommand>
}
    180a:	2e 96       	adiw	r28, 0x0e	; 14
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <LCD_voidSendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_voidSendCommand(u8 u8CommandCopy)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	2f 97       	sbiw	r28, 0x0f	; 15
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	8f 87       	std	Y+15, r24	; 0x0f
	 *Send command on data port
	 *Turn on the enable pin
	 *delay to read the command (1ms more for init function)
	 *Turn off the enable pin
	*/
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOGIC_LOW);
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	62 e0       	ldi	r22, 0x02	; 2
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOGIC_LOW);
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	63 e0       	ldi	r22, 0x03	; 3
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_PORT,u8CommandCopy);
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	6f 85       	ldd	r22, Y+15	; 0x0f
    184a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_HIGH);
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	64 e0       	ldi	r22, 0x04	; 4
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e4       	ldi	r27, 0x40	; 64
    1860:	8b 87       	std	Y+11, r24	; 0x0b
    1862:	9c 87       	std	Y+12, r25	; 0x0c
    1864:	ad 87       	std	Y+13, r26	; 0x0d
    1866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8f 83       	std	Y+7, r24	; 0x07
    1882:	98 87       	std	Y+8, r25	; 0x08
    1884:	a9 87       	std	Y+9, r26	; 0x09
    1886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <LCD_voidSendCommand+0xee>
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_voidSendCommand+0xdc>
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <LCD_voidSendCommand+0xd0>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_voidSendCommand+0x118>
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_LOW);
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	64 e0       	ldi	r22, 0x04	; 4
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
}
    1946:	2f 96       	adiw	r28, 0x0f	; 15
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <LCD_voidSendData>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_voidSendData(u8 u8DataCopy)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	2f 97       	sbiw	r28, 0x0f	; 15
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	8f 87       	std	Y+15, r24	; 0x0f
	 *Send command on data port
	 *Turn on the enable pin
	 *delay to read the command
	 *Turn off the enable pin
	*/
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOGIC_HIGH);
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	62 e0       	ldi	r22, 0x02	; 2
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOGIC_LOW);
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_PORT,u8DataCopy);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	6f 85       	ldd	r22, Y+15	; 0x0f
    1986:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_HIGH);
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	64 e0       	ldi	r22, 0x04	; 4
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e4       	ldi	r27, 0x40	; 64
    199c:	8b 87       	std	Y+11, r24	; 0x0b
    199e:	9c 87       	std	Y+12, r25	; 0x0c
    19a0:	ad 87       	std	Y+13, r26	; 0x0d
    19a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a ef       	ldi	r20, 0xFA	; 250
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8f 83       	std	Y+7, r24	; 0x07
    19be:	98 87       	std	Y+8, r25	; 0x08
    19c0:	a9 87       	std	Y+9, r26	; 0x09
    19c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_voidSendData+0x8e>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    19e6:	6f 81       	ldd	r22, Y+7	; 0x07
    19e8:	78 85       	ldd	r23, Y+8	; 0x08
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_voidSendData+0xee>
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_voidSendData+0xdc>
    1a38:	9c 83       	std	Y+4, r25	; 0x04
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_voidSendData+0xd0>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6f 81       	ldd	r22, Y+7	; 0x07
    1a52:	78 85       	ldd	r23, Y+8	; 0x08
    1a54:	89 85       	ldd	r24, Y+9	; 0x09
    1a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_voidSendData+0x118>
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOGIC_LOW);
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <DIO_SetPinValue>
}
    1a82:	2f 96       	adiw	r28, 0x0f	; 15
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <LCD_voidSendString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_voidSendString(const u8 *Str)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <LCD_voidSendString+0x6>
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9b 83       	std	Y+3, r25	; 0x03
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <LCD_voidSendString+0x30>
	while(Str[i] != '\0')
	{
		LCD_voidSendData(Str[i]);
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	e2 0f       	add	r30, r18
    1ab6:	f3 1f       	adc	r31, r19
    1ab8:	80 81       	ld	r24, Z
    1aba:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidSendData>
		i++;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_voidSendString(const u8 *Str)
{
	u8 i=0;
	while(Str[i] != '\0')
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	fc 01       	movw	r30, r24
    1ad0:	e2 0f       	add	r30, r18
    1ad2:	f3 1f       	adc	r31, r19
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 23       	and	r24, r24
    1ad8:	39 f7       	brne	.-50     	; 0x1aa8 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Str[i]);
		i++;
	}
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(u8 row,u8 col)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <LCD_moveCursor+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <LCD_moveCursor+0x8>
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	8a 83       	std	Y+2, r24	; 0x02
    1af6:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3d 83       	std	Y+5, r19	; 0x05
    1b00:	2c 83       	std	Y+4, r18	; 0x04
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	9d 81       	ldd	r25, Y+5	; 0x05
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	91 05       	cpc	r25, r1
    1b0a:	c1 f0       	breq	.+48     	; 0x1b3c <LCD_moveCursor+0x56>
    1b0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <LCD_moveCursor+0x3a>
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	61 f0       	breq	.+24     	; 0x1b36 <LCD_moveCursor+0x50>
    1b1e:	19 c0       	rjmp	.+50     	; 0x1b52 <LCD_moveCursor+0x6c>
    1b20:	2c 81       	ldd	r18, Y+4	; 0x04
    1b22:	3d 81       	ldd	r19, Y+5	; 0x05
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	69 f0       	breq	.+26     	; 0x1b44 <LCD_moveCursor+0x5e>
    1b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	91 05       	cpc	r25, r1
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <LCD_moveCursor+0x66>
    1b34:	0e c0       	rjmp	.+28     	; 0x1b52 <LCD_moveCursor+0x6c>
	{
		case 0:
		lcd_memory_address=col;
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	0b c0       	rjmp	.+22     	; 0x1b52 <LCD_moveCursor+0x6c>
		break;
		case 1:
		lcd_memory_address=col+0x40;
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	80 5c       	subi	r24, 0xC0	; 192
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	07 c0       	rjmp	.+14     	; 0x1b52 <LCD_moveCursor+0x6c>
		break;
		case 2:
		lcd_memory_address=col+0x10;
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	80 5f       	subi	r24, 0xF0	; 240
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <LCD_moveCursor+0x6c>
		break;
		case 3:
		lcd_memory_address=col+0x50;
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	80 5b       	subi	r24, 0xB0	; 176
    1b50:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	80 68       	ori	r24, 0x80	; 128
    1b56:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_voidSendCommand>
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <LCD_voidIntgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_voidIntgerToString(u32 data)
{
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	64 97       	sbiw	r28, 0x14	; 20
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	69 8b       	std	Y+17, r22	; 0x11
    1b84:	7a 8b       	std	Y+18, r23	; 0x12
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	9c 8b       	std	Y+20, r25	; 0x14
	u8 buff[16];
	itoa(data,buff,10);
    1b8a:	89 89       	ldd	r24, Y+17	; 0x11
    1b8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8e:	ab 89       	ldd	r26, Y+19	; 0x13
    1b90:	bc 89       	ldd	r27, Y+20	; 0x14
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	9e 01       	movw	r18, r28
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	0a e0       	ldi	r16, 0x0A	; 10
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <itoa>
	LCD_voidSendString(buff);
    1baa:	ce 01       	movw	r24, r28
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
}
    1bb2:	64 96       	adiw	r28, 0x14	; 20
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <LCD_voidClearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_voidClearScreen(void)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_voidSendCommand>
}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <UART_Init>:
#include "DIO.h"
#include "avr/io.h"
#include "UART.h"

void UART_Init(void)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	// Set Baud Rate 9600
	UBRRL=51;
    1be4:	e9 e2       	ldi	r30, 0x29	; 41
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	83 e3       	ldi	r24, 0x33	; 51
    1bea:	80 83       	st	Z, r24
	UBRRH = 0;
    1bec:	e0 e4       	ldi	r30, 0x40	; 64
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1

	SET_BIT(UCSRC,URSEL);
    1bf2:	a0 e4       	ldi	r26, 0x40	; 64
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e0 e4       	ldi	r30, 0x40	; 64
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 68       	ori	r24, 0x80	; 128
    1bfe:	8c 93       	st	X, r24
	// Set Frame Format -> 8 data, 1 stop, No Parity
	//  Word Size [8 bits], By default = 8 bits
	SET_BIT(UCSRC,UCSZ0);
    1c00:	a0 e4       	ldi	r26, 0x40	; 64
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e0 e4       	ldi	r30, 0x40	; 64
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	82 60       	ori	r24, 0x02	; 2
    1c0c:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
    1c0e:	a0 e4       	ldi	r26, 0x40	; 64
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e0 e4       	ldi	r30, 0x40	; 64
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2);
    1c1c:	aa e2       	ldi	r26, 0x2A	; 42
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ea e2       	ldi	r30, 0x2A	; 42
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8b 7f       	andi	r24, 0xFB	; 251
    1c28:	8c 93       	st	X, r24

	//Disable Parity
	CLEAR_BIT(UCSRC,UPM0);
    1c2a:	a0 e4       	ldi	r26, 0x40	; 64
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e0 e4       	ldi	r30, 0x40	; 64
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 7e       	andi	r24, 0xEF	; 239
    1c36:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1);
    1c38:	a0 e4       	ldi	r26, 0x40	; 64
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e0 e4       	ldi	r30, 0x40	; 64
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 7d       	andi	r24, 0xDF	; 223
    1c44:	8c 93       	st	X, r24

	//Stop bit --> 1 bit
	CLEAR_BIT(UCSRC,USBS);
    1c46:	a0 e4       	ldi	r26, 0x40	; 64
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e0 e4       	ldi	r30, 0x40	; 64
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	87 7f       	andi	r24, 0xF7	; 247
    1c52:	8c 93       	st	X, r24
	SET_BIT( u8UCSRCValue_Local , UCSZ1);
	SET_BIT( u8UCSRCValue_Local , UCSZ0);
    UCSRC =  u8UCSRCValue_Local ; */

	//Enable TX ,RX
	SET_BIT( UCSRB,TXEN);
    1c54:	aa e2       	ldi	r26, 0x2A	; 42
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ea e2       	ldi	r30, 0x2A	; 42
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 60       	ori	r24, 0x08	; 8
    1c60:	8c 93       	st	X, r24
	SET_BIT( UCSRB,RXEN);
    1c62:	aa e2       	ldi	r26, 0x2A	; 42
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	ea e2       	ldi	r30, 0x2A	; 42
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 61       	ori	r24, 0x10	; 16
    1c6e:	8c 93       	st	X, r24

}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <USART_SendData>:


void USART_SendData(u8 u8data_Copy)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	0f 92       	push	r0
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : wait flag UDRFE to finish
	// Wait until transmission Register Empty
	while(GET_BIT(UCSRA , UDRE) == 0);
    1c82:	eb e2       	ldi	r30, 0x2B	; 43
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	82 95       	swap	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	87 70       	andi	r24, 0x07	; 7
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	81 70       	andi	r24, 0x01	; 1
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	a1 f3       	breq	.-24     	; 0x1c82 <USART_SendData+0xc>

	// step 2 : send Data
	UDR = u8data_Copy; //UDR is buffer register
    1c9a:	ec e2       	ldi	r30, 0x2C	; 44
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	80 83       	st	Z, r24
}
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <USART_voidSendString>:


void USART_voidSendString(u8* Copy_pu8Data){
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <USART_voidSendString+0x6>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	0b c0       	rjmp	.+22     	; 0x1cd0 <USART_voidSendString+0x26>
	while((*Copy_pu8Data) != 0){
		USART_SendData(*Copy_pu8Data++);
    1cba:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbe:	20 81       	ld	r18, Z
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	82 2f       	mov	r24, r18
    1ccc:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	UDR = u8data_Copy; //UDR is buffer register
}


void USART_voidSendString(u8* Copy_pu8Data){
	while((*Copy_pu8Data) != 0){
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 23       	and	r24, r24
    1cd8:	81 f7       	brne	.-32     	; 0x1cba <USART_voidSendString+0x10>
		USART_SendData(*Copy_pu8Data++);
	}
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <USART_ReceiveData>:


u8   USART_ReceiveData(void)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	// step 1 : wait flag RXC to finish
	while(GET_BIT(UCSRA,RXC)==0) ;
    1cec:	eb e2       	ldi	r30, 0x2B	; 43
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 23       	and	r24, r24
    1cf4:	dc f7       	brge	.-10     	; 0x1cec <USART_ReceiveData+0x8>
	// step 2 : Receive Data
	return UDR ;
    1cf6:	ec e2       	ldi	r30, 0x2C	; 44
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
}
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <USART_voidReceiveString>:
void USART_voidReceiveString(u8* Copy_pu8Data){
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <USART_voidReceiveString+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <USART_voidReceiveString+0x8>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	8b 83       	std	Y+3, r24	; 0x03
	u8  x = USART_ReceiveData() ,i=0;
    1d12:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1d16:	8a 83       	std	Y+2, r24	; 0x02
    1d18:	19 82       	std	Y+1, r1	; 0x01
    1d1a:	10 c0       	rjmp	.+32     	; 0x1d3c <USART_voidReceiveString+0x3a>
	while(x != '.'){
		Copy_pu8Data[i++] = x;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	fc 01       	movw	r30, r24
    1d28:	e2 0f       	add	r30, r18
    1d2a:	f3 1f       	adc	r31, r19
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	80 83       	st	Z, r24
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	89 83       	std	Y+1, r24	; 0x01
		x = USART_ReceiveData();
    1d36:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
	// step 2 : Receive Data
	return UDR ;
}
void USART_voidReceiveString(u8* Copy_pu8Data){
	u8  x = USART_ReceiveData() ,i=0;
	while(x != '.'){
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	8e 32       	cpi	r24, 0x2E	; 46
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <USART_voidReceiveString+0x1a>
		Copy_pu8Data[i++] = x;
		x = USART_ReceiveData();
	}
	Copy_pu8Data[i]= '\0';
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	10 82       	st	Z, r1

}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <main>:
void Mainopt_voidInit(void);
void error_voidInit(void);
void DOOR_INIT(void);

int main(void)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
	System_voidInit();
    1d6a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <System_voidInit>
	while (1)
	{
		USART_SendData(MC2_READY);
    1d6e:	80 e1       	ldi	r24, 0x10	; 16
    1d70:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
		pass_flag = USART_ReceiveData();
    1d74:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1d78:	80 93 fe 00 	sts	0x00FE, r24
		if (pass_flag == N_AVAILABLE)/* if there is no password saved in memory*/
    1d7c:	80 91 fe 00 	lds	r24, 0x00FE
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	19 f4       	brne	.+6      	; 0x1d8a <main+0x28>
		{
			welcome_voidInit();
    1d84:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <welcome_voidInit>
    1d88:	f2 cf       	rjmp	.-28     	; 0x1d6e <main+0xc>
		}
	    else if (pass_flag == AVAILABLE)/* if there is password saved in memory*/
    1d8a:	80 91 fe 00 	lds	r24, 0x00FE
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	19 f4       	brne	.+6      	; 0x1d98 <main+0x36>
		{
			Mainopt_voidInit();
    1d92:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <Mainopt_voidInit>
    1d96:	eb cf       	rjmp	.-42     	; 0x1d6e <main+0xc>
		}
		else
		{
            // do nothing
			LCD_voidClearScreen();
    1d98:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
			LCD_voidSendString("ERROR");
    1d9c:	80 e6       	ldi	r24, 0x60	; 96
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
    1da4:	e4 cf       	rjmp	.-56     	; 0x1d6e <main+0xc>

00001da6 <System_voidInit>:




void System_voidInit(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    1dae:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_voidInit>
	KEYPAD_voidInit();
    1db2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_voidInit>
	UART_Init();
    1db6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <UART_Init>
	USART_SendData(MC2_READY);
    1dba:	80 e1       	ldi	r24, 0x10	; 16
    1dbc:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	SREG |= (1<<7); /* Enable global interrupts in MC */
    1dc0:	af e5       	ldi	r26, 0x5F	; 95
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ef e5       	ldi	r30, 0x5F	; 95
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 68       	ori	r24, 0x80	; 128
    1dcc:	8c 93       	st	X, r24

}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <welcome_voidInit>:

void welcome_voidInit(void)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <welcome_voidInit+0x6>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	u8  i=0, key=0 ;
    1dde:	1a 82       	std	Y+2, r1	; 0x02
    1de0:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearScreen();
    1de2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("plz enter pass:");
    1de6:	86 e6       	ldi	r24, 0x66	; 102
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(1,0);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>
	while(USART_ReceiveData() != MC2_READY);
    1df6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1dfa:	80 31       	cpi	r24, 0x10	; 16
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <welcome_voidInit+0x22>
//	LCD_voidSendString("terminate while");

	for (i=0;i<5;i++)
    1dfe:	1a 82       	std	Y+2, r1	; 0x02
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <welcome_voidInit+0x56>
	{
		if (KEYPAD_u8GetPressedKey() != KEYPAD_BUTTON_RELEASED)/* if button pressed */
    1e02:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	51 f0       	breq	.+20     	; 0x1e1e <welcome_voidInit+0x4a>
		{
			key = KEYPAD_u8GetPressedKey();
    1e0a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1e0e:	89 83       	std	Y+1, r24	; 0x01
			USART_SendData(key);
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
			LCD_voidSendData('*');
    1e16:	8a e2       	ldi	r24, 0x2A	; 42
    1e18:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidSendData>
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <welcome_voidInit+0x50>
		}
		else
		{
			--i;/* if the KEYPAD_BUTTON_RELEASED */
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	81 50       	subi	r24, 0x01	; 1
    1e22:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendString("plz enter pass:");
	LCD_moveCursor(1,0);
	while(USART_ReceiveData() != MC2_READY);
//	LCD_voidSendString("terminate while");

	for (i=0;i<5;i++)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	85 30       	cpi	r24, 0x05	; 5
    1e2e:	48 f3       	brcs	.-46     	; 0x1e02 <welcome_voidInit+0x2e>
		else
		{
			--i;/* if the KEYPAD_BUTTON_RELEASED */
		}
	}
	USART_SendData('.');
    1e30:	8e e2       	ldi	r24, 0x2E	; 46
    1e32:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	while (KEYPAD_u8GetPressedKey() != '=')
    1e36:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1e3a:	8d 33       	cpi	r24, 0x3D	; 61
    1e3c:	e1 f7       	brne	.-8      	; 0x1e36 <welcome_voidInit+0x62>
	{}
	second_voidInit();
    1e3e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <second_voidInit>
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <second_voidInit>:

void second_voidInit(void)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <second_voidInit+0x6>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	u8 i2=0, key2=0 ;
    1e56:	1a 82       	std	Y+2, r1	; 0x02
    1e58:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearScreen();
    1e5a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("plz re-enter pass : ");
    1e5e:	86 e7       	ldi	r24, 0x76	; 118
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(1,0);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>
	while(USART_ReceiveData() != MC2_READY);
    1e6e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1e72:	80 31       	cpi	r24, 0x10	; 16
    1e74:	e1 f7       	brne	.-8      	; 0x1e6e <second_voidInit+0x22>
	for (i2=0;i2<5;i2++)
    1e76:	1a 82       	std	Y+2, r1	; 0x02
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <second_voidInit+0x56>
	{
		if (KEYPAD_u8GetPressedKey() != KEYPAD_BUTTON_RELEASED)/* if button pressed */
    1e7a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	51 f0       	breq	.+20     	; 0x1e96 <second_voidInit+0x4a>
		{
			key2 = KEYPAD_u8GetPressedKey();
    1e82:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1e86:	89 83       	std	Y+1, r24	; 0x01
			USART_SendData(key2);
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
			LCD_voidSendData('*');
    1e8e:	8a e2       	ldi	r24, 0x2A	; 42
    1e90:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidSendData>
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <second_voidInit+0x50>
		}
		else
		{
			--i2;/* if the KEYPAD_BUTTON_RELEASED */
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	81 50       	subi	r24, 0x01	; 1
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i2=0, key2=0 ;
	LCD_voidClearScreen();
	LCD_voidSendString("plz re-enter pass : ");
	LCD_moveCursor(1,0);
	while(USART_ReceiveData() != MC2_READY);
	for (i2=0;i2<5;i2++)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	85 30       	cpi	r24, 0x05	; 5
    1ea6:	48 f3       	brcs	.-46     	; 0x1e7a <second_voidInit+0x2e>
		{
			--i2;/* if the KEYPAD_BUTTON_RELEASED */
		}

	}
	USART_SendData('.');
    1ea8:	8e e2       	ldi	r24, 0x2E	; 46
    1eaa:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	while (KEYPAD_u8GetPressedKey() != '=')
    1eae:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1eb2:	8d 33       	cpi	r24, 0x3D	; 61
    1eb4:	e1 f7       	brne	.-8      	; 0x1eae <second_voidInit+0x62>
	{}
	USART_SendData(MC2_READY);
    1eb6:	80 e1       	ldi	r24, 0x10	; 16
    1eb8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	confirm = USART_ReceiveData();
    1ebc:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1ec0:	80 93 fd 00 	sts	0x00FD, r24
	if(confirm == MATCHED_PASS)
    1ec4:	80 91 fd 00 	lds	r24, 0x00FD
    1ec8:	85 35       	cpi	r24, 0x55	; 85
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <second_voidInit+0x86>
	{
		Mainopt_voidInit();
    1ecc:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <Mainopt_voidInit>
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <second_voidInit+0x92>
	}
	else if (confirm == UNMATCHED_PASS)
    1ed2:	80 91 fd 00 	lds	r24, 0x00FD
    1ed6:	83 33       	cpi	r24, 0x33	; 51
    1ed8:	11 f4       	brne	.+4      	; 0x1ede <second_voidInit+0x92>
	{
		second_voidInit();
    1eda:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <second_voidInit>
	}
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <Mainopt_voidInit>:

void Mainopt_voidInit(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <Mainopt_voidInit+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
	u8 option=0,temp=0;
    1ef2:	1a 82       	std	Y+2, r1	; 0x02
    1ef4:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearScreen();
    1ef6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("+ : Open door");
    1efa:	8b e8       	ldi	r24, 0x8B	; 139
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(1,0);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>
	LCD_voidSendString("- : Change pass");
    1f0a:	89 e9       	ldi	r24, 0x99	; 153
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(2,0);
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>

	USART_SendData(MC2_READY);
    1f1a:	80 e1       	ldi	r24, 0x10	; 16
    1f1c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	temp=USART_ReceiveData();
    1f20:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1f24:	89 83       	std	Y+1, r24	; 0x01

	LCD_moveCursor(2,3);/* to display the string from the third row*/
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	63 e0       	ldi	r22, 0x03	; 3
    1f2a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>
	/* Display this string "Temp =   C" only once on LCD at the third raw row */
	LCD_voidSendString(" Temp =    C");
    1f2e:	89 ea       	ldi	r24, 0xA9	; 169
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(2,10);
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	6a e0       	ldi	r22, 0x0A	; 10
    1f3a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>
	LCD_voidIntgerToString((temp-22)+0x30);
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	4a 96       	adiw	r24, 0x1a	; 26
    1f46:	aa 27       	eor	r26, r26
    1f48:	97 fd       	sbrc	r25, 7
    1f4a:	a0 95       	com	r26
    1f4c:	ba 2f       	mov	r27, r26
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_voidIntgerToString>
	LCD_voidSendData(' ');
    1f56:	80 e2       	ldi	r24, 0x20	; 32
    1f58:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidSendData>
	//

	option = KEYPAD_u8GetPressedKey();
    1f5c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <Mainopt_voidInit+0x82>
	while ( option != '+' &&  option != '-')
	{
		option = KEYPAD_u8GetPressedKey();
    1f64:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1f68:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidIntgerToString((temp-22)+0x30);
	LCD_voidSendData(' ');
	//

	option = KEYPAD_u8GetPressedKey();
	while ( option != '+' &&  option != '-')
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	8b 32       	cpi	r24, 0x2B	; 43
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <Mainopt_voidInit+0x8e>
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	8d 32       	cpi	r24, 0x2D	; 45
    1f74:	b9 f7       	brne	.-18     	; 0x1f64 <Mainopt_voidInit+0x7c>
	{
		option = KEYPAD_u8GetPressedKey();
	}


	if (option == '+')
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	8b 32       	cpi	r24, 0x2B	; 43
    1f7a:	19 f4       	brne	.+6      	; 0x1f82 <Mainopt_voidInit+0x9a>
	{
		Positive_voidInit();
    1f7c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <Positive_voidInit>
    1f80:	05 c0       	rjmp	.+10     	; 0x1f8c <Mainopt_voidInit+0xa4>
	}
	else if (option == '-')
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	8d 32       	cpi	r24, 0x2D	; 45
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <Mainopt_voidInit+0xa4>
	{
		Negative_voidInit();
    1f88:	0e 94 2e 10 	call	0x205c	; 0x205c <Negative_voidInit>
	}
	else
	{

	}
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <Positive_voidInit>:


void Positive_voidInit(void)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <Positive_voidInit+0x6>
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	u8 i3=0, key3=0,confirm=0;
    1fa2:	1b 82       	std	Y+3, r1	; 0x03
    1fa4:	1a 82       	std	Y+2, r1	; 0x02
    1fa6:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearScreen();
    1fa8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("plz enter pass2:");
    1fac:	86 eb       	ldi	r24, 0xB6	; 182
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(1,0);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>

	while(USART_ReceiveData() != MC2_READY);
    1fbc:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    1fc0:	80 31       	cpi	r24, 0x10	; 16
    1fc2:	e1 f7       	brne	.-8      	; 0x1fbc <Positive_voidInit+0x26>
	for (i3=0;i3<5;i3++)
    1fc4:	1b 82       	std	Y+3, r1	; 0x03
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <Positive_voidInit+0x5a>
	{

		if (KEYPAD_u8GetPressedKey() != KEYPAD_BUTTON_RELEASED)/* if button pressed */
    1fc8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	51 f0       	breq	.+20     	; 0x1fe4 <Positive_voidInit+0x4e>
		{
			key3 = KEYPAD_u8GetPressedKey();
    1fd0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
			USART_SendData(key3);
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
			LCD_voidSendData('*');
    1fdc:	8a e2       	ldi	r24, 0x2A	; 42
    1fde:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidSendData>
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <Positive_voidInit+0x54>
		}
		else
		{
			--i3;/* if the KEYPAD_BUTTON_RELEASED */
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidClearScreen();
	LCD_voidSendString("plz enter pass2:");
	LCD_moveCursor(1,0);

	while(USART_ReceiveData() != MC2_READY);
	for (i3=0;i3<5;i3++)
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	85 30       	cpi	r24, 0x05	; 5
    1ff4:	48 f3       	brcs	.-46     	; 0x1fc8 <Positive_voidInit+0x32>
		else
		{
			--i3;/* if the KEYPAD_BUTTON_RELEASED */
		}
	}
	USART_SendData('.');
    1ff6:	8e e2       	ldi	r24, 0x2E	; 46
    1ff8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	while (KEYPAD_u8GetPressedKey() != '=')
    1ffc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    2000:	8d 33       	cpi	r24, 0x3D	; 61
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <Positive_voidInit+0x66>
	{}
	USART_SendData(MC2_READY);
    2004:	80 e1       	ldi	r24, 0x10	; 16
    2006:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	confirm = USART_ReceiveData();
    200a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    200e:	89 83       	std	Y+1, r24	; 0x01
	if(confirm == MATCHED_PASS)
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	85 35       	cpi	r24, 0x55	; 85
    2014:	51 f4       	brne	.+20     	; 0x202a <Positive_voidInit+0x94>
	{
		while(USART_ReceiveData() != MC2_READY);
    2016:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    201a:	80 31       	cpi	r24, 0x10	; 16
    201c:	e1 f7       	brne	.-8      	; 0x2016 <Positive_voidInit+0x80>
		USART_SendData(ACTIVATE_MOTOR);
    201e:	82 e2       	ldi	r24, 0x22	; 34
    2020:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
		DOOR_INIT();
    2024:	0e 94 1f 11 	call	0x223e	; 0x223e <DOOR_INIT>
    2028:	13 c0       	rjmp	.+38     	; 0x2050 <Positive_voidInit+0xba>


	}
	else if (confirm == UNMATCHED_PASS)
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	83 33       	cpi	r24, 0x33	; 51
    202e:	81 f4       	brne	.+32     	; 0x2050 <Positive_voidInit+0xba>
	{
		error_flag++;
    2030:	80 91 fc 00 	lds	r24, 0x00FC
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	80 93 fc 00 	sts	0x00FC, r24
		if (error_flag == 3)
    203a:	80 91 fc 00 	lds	r24, 0x00FC
    203e:	83 30       	cpi	r24, 0x03	; 3
    2040:	29 f4       	brne	.+10     	; 0x204c <Positive_voidInit+0xb6>
		{
			error_voidInit();
    2042:	0e 94 92 10 	call	0x2124	; 0x2124 <error_voidInit>
			error_flag=0;
    2046:	10 92 fc 00 	sts	0x00FC, r1
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <Positive_voidInit+0xba>
		}
		else
		{
			Positive_voidInit();
    204c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <Positive_voidInit>
		}

	}

}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <Negative_voidInit>:




void Negative_voidInit(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <Negative_voidInit+0x6>
    2062:	0f 92       	push	r0
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62

	u8 i3=0, key3=0,confirm=MATCHED_PASS;
    2068:	1b 82       	std	Y+3, r1	; 0x03
    206a:	1a 82       	std	Y+2, r1	; 0x02
    206c:	85 e5       	ldi	r24, 0x55	; 85
    206e:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidClearScreen();
    2070:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("plz enter pass2:");
    2074:	86 eb       	ldi	r24, 0xB6	; 182
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
	LCD_moveCursor(1,0);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_moveCursor>

	while(USART_ReceiveData() != MC2_READY);
    2084:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    2088:	80 31       	cpi	r24, 0x10	; 16
    208a:	e1 f7       	brne	.-8      	; 0x2084 <Negative_voidInit+0x28>
	for (i3=0;i3<5;i3++)
    208c:	1b 82       	std	Y+3, r1	; 0x03
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <Negative_voidInit+0x5c>
	{
		if (KEYPAD_u8GetPressedKey() != KEYPAD_BUTTON_RELEASED)/* if button pressed */
    2090:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	51 f0       	breq	.+20     	; 0x20ac <Negative_voidInit+0x50>
		{
			key3 = KEYPAD_u8GetPressedKey();
    2098:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    209c:	8a 83       	std	Y+2, r24	; 0x02
			USART_SendData(key3);
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
			LCD_voidSendData('*');
    20a4:	8a e2       	ldi	r24, 0x2A	; 42
    20a6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_voidSendData>
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <Negative_voidInit+0x56>
		}
		else
		{
			--i3;/* if the KEYPAD_BUTTON_RELEASED */
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	81 50       	subi	r24, 0x01	; 1
    20b0:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidClearScreen();
	LCD_voidSendString("plz enter pass2:");
	LCD_moveCursor(1,0);

	while(USART_ReceiveData() != MC2_READY);
	for (i3=0;i3<5;i3++)
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	8b 83       	std	Y+3, r24	; 0x03
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	85 30       	cpi	r24, 0x05	; 5
    20bc:	48 f3       	brcs	.-46     	; 0x2090 <Negative_voidInit+0x34>
		else
		{
			--i3;/* if the KEYPAD_BUTTON_RELEASED */
		}
	}
	USART_SendData('.');
    20be:	8e e2       	ldi	r24, 0x2E	; 46
    20c0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	while (KEYPAD_u8GetPressedKey() != '=')
    20c4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KEYPAD_u8GetPressedKey>
    20c8:	8d 33       	cpi	r24, 0x3D	; 61
    20ca:	e1 f7       	brne	.-8      	; 0x20c4 <Negative_voidInit+0x68>
	{}
	USART_SendData(MC2_READY);
    20cc:	80 e1       	ldi	r24, 0x10	; 16
    20ce:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
	confirm = USART_ReceiveData();
    20d2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    20d6:	89 83       	std	Y+1, r24	; 0x01
	//confirm = UART_recieveByte();
	//confirm = MATCHED_PASS;
	if(confirm == MATCHED_PASS)
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	85 35       	cpi	r24, 0x55	; 85
    20dc:	51 f4       	brne	.+20     	; 0x20f2 <Negative_voidInit+0x96>
	{
		while(USART_ReceiveData() != MC2_READY);
    20de:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    20e2:	80 31       	cpi	r24, 0x10	; 16
    20e4:	e1 f7       	brne	.-8      	; 0x20de <Negative_voidInit+0x82>
		USART_SendData(ERASE_EEPROM);
    20e6:	86 e6       	ldi	r24, 0x66	; 102
    20e8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <USART_SendData>
		welcome_voidInit();
    20ec:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <welcome_voidInit>
    20f0:	13 c0       	rjmp	.+38     	; 0x2118 <Negative_voidInit+0xbc>
	}
	else if (confirm == UNMATCHED_PASS)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	83 33       	cpi	r24, 0x33	; 51
    20f6:	81 f4       	brne	.+32     	; 0x2118 <Negative_voidInit+0xbc>
	{
		error_flag++;
    20f8:	80 91 fc 00 	lds	r24, 0x00FC
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	80 93 fc 00 	sts	0x00FC, r24
		if (error_flag == 3)
    2102:	80 91 fc 00 	lds	r24, 0x00FC
    2106:	83 30       	cpi	r24, 0x03	; 3
    2108:	29 f4       	brne	.+10     	; 0x2114 <Negative_voidInit+0xb8>
		{
			error_voidInit();
    210a:	0e 94 92 10 	call	0x2124	; 0x2124 <error_voidInit>
			error_flag=0;
    210e:	10 92 fc 00 	sts	0x00FC, r1
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <Negative_voidInit+0xbc>
		}
		else
		{
			Negative_voidInit();
    2114:	0e 94 2e 10 	call	0x205c	; 0x205c <Negative_voidInit>
		}

	}
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <error_voidInit>:

void error_voidInit(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	2e 97       	sbiw	r28, 0x0e	; 14
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61

	LCD_voidClearScreen();
    2138:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("Error?!");
    213c:	87 ec       	ldi	r24, 0xC7	; 199
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e6       	ldi	r25, 0x60	; 96
    2148:	aa e6       	ldi	r26, 0x6A	; 106
    214a:	b7 e4       	ldi	r27, 0x47	; 71
    214c:	8b 87       	std	Y+11, r24	; 0x0b
    214e:	9c 87       	std	Y+12, r25	; 0x0c
    2150:	ad 87       	std	Y+13, r26	; 0x0d
    2152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8f 83       	std	Y+7, r24	; 0x07
    216e:	98 87       	std	Y+8, r25	; 0x08
    2170:	a9 87       	std	Y+9, r26	; 0x09
    2172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <error_voidInit+0x72>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <error_voidInit+0xf0>
	else if (__tmp > 65535)
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <error_voidInit+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <error_voidInit+0xd2>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <error_voidInit+0xc0>
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <error_voidInit+0xb4>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <error_voidInit+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <error_voidInit+0xfc>
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);
	Mainopt_voidInit();
    2228:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <Mainopt_voidInit>

}
    222c:	2e 96       	adiw	r28, 0x0e	; 14
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <DOOR_INIT>:

void DOOR_INIT(void){
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    u8 done =0;
    2248:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearScreen();
    224a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidClearScreen>
	LCD_voidSendString("The Door is Opening");
    224e:	8f ec       	ldi	r24, 0xCF	; 207
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidSendString>
    2256:	03 c0       	rjmp	.+6      	; 0x225e <DOOR_INIT+0x20>
	//USART_SendData(MC2_READY);
	while (done != DOOR_DONE)
	{
		done = USART_ReceiveData();
    2258:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USART_ReceiveData>
    225c:	89 83       	std	Y+1, r24	; 0x01
void DOOR_INIT(void){
    u8 done =0;
	LCD_voidClearScreen();
	LCD_voidSendString("The Door is Opening");
	//USART_SendData(MC2_READY);
	while (done != DOOR_DONE)
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	80 35       	cpi	r24, 0x50	; 80
    2262:	d1 f7       	brne	.-12     	; 0x2258 <DOOR_INIT+0x1a>
	{
		done = USART_ReceiveData();
	}
	Mainopt_voidInit();
    2264:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <Mainopt_voidInit>



}
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <__divmodsi4>:
    2270:	97 fb       	bst	r25, 7
    2272:	09 2e       	mov	r0, r25
    2274:	05 26       	eor	r0, r21
    2276:	0e d0       	rcall	.+28     	; 0x2294 <__divmodsi4_neg1>
    2278:	57 fd       	sbrc	r21, 7
    227a:	04 d0       	rcall	.+8      	; 0x2284 <__divmodsi4_neg2>
    227c:	14 d0       	rcall	.+40     	; 0x22a6 <__udivmodsi4>
    227e:	0a d0       	rcall	.+20     	; 0x2294 <__divmodsi4_neg1>
    2280:	00 1c       	adc	r0, r0
    2282:	38 f4       	brcc	.+14     	; 0x2292 <__divmodsi4_exit>

00002284 <__divmodsi4_neg2>:
    2284:	50 95       	com	r21
    2286:	40 95       	com	r20
    2288:	30 95       	com	r19
    228a:	21 95       	neg	r18
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	4f 4f       	sbci	r20, 0xFF	; 255
    2290:	5f 4f       	sbci	r21, 0xFF	; 255

00002292 <__divmodsi4_exit>:
    2292:	08 95       	ret

00002294 <__divmodsi4_neg1>:
    2294:	f6 f7       	brtc	.-4      	; 0x2292 <__divmodsi4_exit>
    2296:	90 95       	com	r25
    2298:	80 95       	com	r24
    229a:	70 95       	com	r23
    229c:	61 95       	neg	r22
    229e:	7f 4f       	sbci	r23, 0xFF	; 255
    22a0:	8f 4f       	sbci	r24, 0xFF	; 255
    22a2:	9f 4f       	sbci	r25, 0xFF	; 255
    22a4:	08 95       	ret

000022a6 <__udivmodsi4>:
    22a6:	a1 e2       	ldi	r26, 0x21	; 33
    22a8:	1a 2e       	mov	r1, r26
    22aa:	aa 1b       	sub	r26, r26
    22ac:	bb 1b       	sub	r27, r27
    22ae:	fd 01       	movw	r30, r26
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <__udivmodsi4_ep>

000022b2 <__udivmodsi4_loop>:
    22b2:	aa 1f       	adc	r26, r26
    22b4:	bb 1f       	adc	r27, r27
    22b6:	ee 1f       	adc	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	a2 17       	cp	r26, r18
    22bc:	b3 07       	cpc	r27, r19
    22be:	e4 07       	cpc	r30, r20
    22c0:	f5 07       	cpc	r31, r21
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <__udivmodsi4_ep>
    22c4:	a2 1b       	sub	r26, r18
    22c6:	b3 0b       	sbc	r27, r19
    22c8:	e4 0b       	sbc	r30, r20
    22ca:	f5 0b       	sbc	r31, r21

000022cc <__udivmodsi4_ep>:
    22cc:	66 1f       	adc	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	1a 94       	dec	r1
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <__udivmodsi4_loop>
    22d8:	60 95       	com	r22
    22da:	70 95       	com	r23
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	bd 01       	movw	r22, r26
    22e6:	cf 01       	movw	r24, r30
    22e8:	08 95       	ret

000022ea <__prologue_saves__>:
    22ea:	2f 92       	push	r2
    22ec:	3f 92       	push	r3
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	ca 1b       	sub	r28, r26
    2314:	db 0b       	sbc	r29, r27
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	09 94       	ijmp

00002322 <__epilogue_restores__>:
    2322:	2a 88       	ldd	r2, Y+18	; 0x12
    2324:	39 88       	ldd	r3, Y+17	; 0x11
    2326:	48 88       	ldd	r4, Y+16	; 0x10
    2328:	5f 84       	ldd	r5, Y+15	; 0x0f
    232a:	6e 84       	ldd	r6, Y+14	; 0x0e
    232c:	7d 84       	ldd	r7, Y+13	; 0x0d
    232e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2330:	9b 84       	ldd	r9, Y+11	; 0x0b
    2332:	aa 84       	ldd	r10, Y+10	; 0x0a
    2334:	b9 84       	ldd	r11, Y+9	; 0x09
    2336:	c8 84       	ldd	r12, Y+8	; 0x08
    2338:	df 80       	ldd	r13, Y+7	; 0x07
    233a:	ee 80       	ldd	r14, Y+6	; 0x06
    233c:	fd 80       	ldd	r15, Y+5	; 0x05
    233e:	0c 81       	ldd	r16, Y+4	; 0x04
    2340:	1b 81       	ldd	r17, Y+3	; 0x03
    2342:	aa 81       	ldd	r26, Y+2	; 0x02
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	ce 0f       	add	r28, r30
    2348:	d1 1d       	adc	r29, r1
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	ed 01       	movw	r28, r26
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
